{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Wiki","text":"<ul> <li>The Python Wiki</li> <li>The Web Dev Wiki</li> <li>The Bash Wiki</li> <li>The Hardware Wiki</li> <li>Resources and Misc. Notes</li> </ul>"},{"location":"Bash/1%20-%20Bash/","title":"The Bash Wiki","text":""},{"location":"Bash/1%20-%20Bash/#executing-bash-in-fish","title":"Executing Bash in Fish","text":"<p>If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:</p> <p>Consider, that <code>bash</code> is also a command. With <code>man bash</code> you can see that there are two ways to do this:</p> <ul> <li> <p><code>bash</code> has a switch <code>c</code> to read from a string:</p> <p><code>&gt; bash -c SomeBashCommand</code></p> </li> </ul> <p>or <code>bash</code> without a switch, opens a bash shell that you can use and <code>exit</code> afterwards.</p> <p>Linux Cheatsheet</p> <p>File Manipulation</p> <p>Vi Text Editor</p> <p>Permissions</p> <p>Scripting</p>"},{"location":"Bash/1%20-%20Bash/#wildcards","title":"Wildcards","text":"<ul> <li>https://ryanstutorials.net/linuxtutorial/wildcards.php</li> <li>Allows you to create a pattern defining a set of files or directories.</li> <li>May be used with any command</li> <li><code>-</code> represents zero or more characters</li> <li><code>?</code> - represents a single character</li> <li><code>[]</code>- represents a range of characters</li> </ul>"},{"location":"Bash/1%20-%20Bash/#filters","title":"Filters","text":"<ul> <li>Changes how command line accepts text data</li> <li><code>head</code> Prints first lines of text. Default is 10 lines. ex to show only 4 lines:</li> </ul> <pre><code>head -4 mysampledata.txt\n    Fred apples 20\nSusy oranges 5\nMark watermellons 12\nRobert pears 4\n</code></pre> <ul> <li><code>tail</code> Shows last lines of text. Default is 10. ex to show only 3 lines:</li> </ul> <pre><code>tail -3 mysampledata.txt\n    Greg pineapples 3\nOliver rockmellons 2\nBetty limes 14\n</code></pre>"},{"location":"Bash/1%20-%20Bash/#linux-notes","title":"Linux Notes","text":"<ul> <li> <p>Extensions don't matter in Linux, cause the OS looks at the contents not the extension.</p> </li> <li> <p>Linux is case sensitive</p> </li> <li> <p>Spaces in file names are accepted, but complicate things. Avoid it.</p> <ul> <li>Can be avoided by <code>'quoting'</code> the spaced name.</li> <li><code>.</code> in front of a filename makes the file hidden. Can still be found with <code>ls -a</code></li> </ul> </li> </ul>"},{"location":"Bash/File%20Manipulation/","title":"File Manipulation","text":"<ul> <li> <p><code>PWD</code> Print Working Directory: Where your terminal is at</p> </li> <li> <p><code>ls</code>List of contents in directory</p> <ul> <li><code>ls -l</code> Long listing</li> <li><code>cd</code>Change directories</li> </ul> </li> <li> <p><code>man</code>Brings up manual. ex: <code>man ls</code></p> <ul> <li><code>man -k search term</code> Searches every command's manual for search term</li> <li><code>/searchterm</code> while already in a manual will search within that manual.<ul> <li><code>n</code> Shows next found search term</li> </ul> </li> <li> <p><code>mkdir</code> Makes a directory/folder within whatever current directory you are in.</p> </li> <li> <p><code>mkdir -p</code> Makes parent directories (Multiple hierarchy of folders). ex:</p> <pre><code>mkdir -p linuxtutorialwork/foo/bar\n</code></pre> </li> <li> <p>mkdir -v Tell you what it's doing. ex:</p> <pre><code>mkdir -pv linuxtutorialwork/foo/bar\nmkdir: created directory 'linuxtutorialwork/foo'\nmkdir: created directory 'linuxtutorialwork/foo/bar'\n</code></pre> </li> </ul> </li> <li> <p><code>rmdir</code> Removes/deletes a directory/folder.</p> </li> <li> <p><code>touch</code> Will create file if you specify a nonexistent file. Is also used modify access and modification times on a file (though can still be detected with some digging).</p> </li> <li> <p><code>cp</code> Can copy a file or directory. <code>cp -r</code> copies the directory and any sub-directories. ex:</p> </li> </ul> <pre><code>ls\n    barney example1 foo\ncp foo foo2\n    cp: omitting directory 'foo'\ncp -r foo foo2\nls\n    barney example1 foo foo2\n</code></pre> <ul> <li><code>mv</code> Move file or directory. ex:</li> </ul> <pre><code>ls\n    barney example1 foo foo2\nmkdir backups\nmv foo2 backups/foo3\nmv barney backups/\nls\n    backups example1 foo\n</code></pre> <ul> <li> <p>Line 3 We created a new directory called backups.</p> </li> <li> <p>Line 4 We moved the directory foo2 into the directory backups and renamed it as foo3</p> </li> <li> <p>Line 7 We moved the file barney into backups. As we did not provide a destination name, it kept the same name.</p> </li> </ul> <pre><code>ls\n    backups example1 foo\nmv foo foo3\nls\n    backups example1 foo3\ncd ..\nmkdir linuxtutorialwork/testdir\nmv linuxtutorialwork/testdir /home/ryan/linuxtutorialwork/fred\nls linuxtutorialwork\n    backups example1 foo3 fred\n</code></pre> <ul> <li>Line 3 We renamed the file foo to be foo3 (both paths are relative).</li> <li>Line 6 We moved into our parent directory. This was done only so in the next line we can illustrate that we may run commands on files and directories even if we are not currently in the directory they reside in.</li> <li>Line 8 We renamed the directory testdir to fred (the source path was a relative path and the destination was an absolute path).</li> </ul>"},{"location":"Bash/File%20Manipulation/#renaming-files-with-mv","title":"Renaming files with <code>mv</code>","text":""},{"location":"Bash/File%20Manipulation/#removing-files-or-directories","title":"Removing files or directories","text":"<ul> <li><code>rm</code></li> <li><code>rm -r</code> Remove non empty directories<ul> <li><code>rm -ri</code> Adds confirmation prompt</li> </ul> </li> </ul>"},{"location":"Bash/Permissions/","title":"Permissions","text":"<ul> <li>3 thing you can do with a file<ul> <li>r read - you may view the contents of the file/directory</li> <li>w write - you may change the contents of the file/directory</li> <li>x execute - you may execute or run the file if it is a program or script.</li> </ul> </li> <li>3 sets of people who can specify permissions<ul> <li>owner - a single person who owns the file. (typically the person who created the file but ownership may be granted to some one else by certain users)</li> <li>group - every file belongs to a single group.</li> <li>others - everyone else who is not in the group or the owner.</li> </ul> </li> </ul> <pre><code>ls -l /home/ryan/linuxtutorialwork/frog.png\n    -rwxr----x 1 harry users 2.7K Jan 4 07:32 /home/ryan/linuxtutorialwork/frog.png\n</code></pre> <ul> <li>The first character identifies the file type. If it is a dash ( - ) then it is a normal file. If it is a d then it is a directory.</li> <li>The following 3 characters represent the permissions for the owner. A letter represents the presence of a permission and a dash ( - ) represents the absence of a permission. In this example the owner has all permissions (read, write and execute).</li> <li>The following 3 characters represent the permissions for the group. In this example the group has the ability to read but not write or execute. Note that the order of permissions is always read, then write then execute.</li> <li>Finally the last 3 characters represent the permissions for others (or everyone else). In this example they have the execute permission and nothing else.</li> </ul>"},{"location":"Bash/Permissions/#change-permissions","title":"Change Permissions","text":"<ul> <li><code>chmod</code> Stands for change file mode bits - mode bits=permission indicators</li> <li>chmod has permission arguments that are made up of 3 components<ul> <li>Who are we changing the permission for? [ugoa] - user (or owner), group, others, all</li> <li>Are we granting or revoking the permission - indicated with either a plus ( + ) or minus ( - )</li> <li>Which permission are we setting? - read ( r ), write ( w ) or execute ( x )</li> </ul> </li> </ul>"},{"location":"Bash/Scripting/","title":"Scripting","text":"<p>https://ryanstutorials.net/linuxtutorial/scripting.php</p> <ul> <li>1st line: the shebang: <code>#!</code> List the interpreter you are using. Good practice in case of using script in other conditions.</li> <li>Naming: While Linux is an extension-less system, put the .sh extension for convenience.</li> <li>Comments: start with <code>#</code> It is common practice to include a comment at the top of a script with a brief description of what the script does and also who wrote it and when</li> </ul> <pre><code># A simple demonstration script\n# Ryan 4/2/2021\n</code></pre> <ul> <li><code>./</code> Tells the system that you want to run a specified script</li> <li>Script must have execute permissions to run<ul> <li>A good command to run to ensure your script is set up right is <code>chmod 755 &lt;script&gt;</code></li> </ul> </li> </ul>"},{"location":"Bash/Scripting/#variables","title":"Variables","text":"<ul> <li>Container for piece of data</li> <li>When we set a variable, we specify it's name, followed directly by an equals sign ( = ) followed directly by the value. (So, no spaces on either side of the = sign.)</li> <li>When we refer to a variable, we must place a dollar sign ( $ ) before the variable name.</li> </ul> <pre><code>#!/bin/bash\n# A simple demonstration of variables\n# Ryan 4/2/2021\n\nname='Ryan'\necho Hello $name\n./variableexample.sh\nHello Ryan\n</code></pre>"},{"location":"Bash/Scripting/#command-line-arguments","title":"Command line arguments","text":""},{"location":"Bash/Vi%20Text%20Editor/","title":"Vi Text Editor","text":""},{"location":"Bash/Vi%20Text%20Editor/#vi-text-editor-command-line","title":"Vi Text Editor (command line)","text":""},{"location":"Bash/Vi%20Text%20Editor/#note-vim-is-based-off-of-vi-so-there-are-many-similarities","title":"Note: Vim is based off of Vi, so there are many similarities","text":""},{"location":"Bash/Vi%20Text%20Editor/#-vim-vimtutor-a-long-tutorial-on-vim-command-line-text-editor","title":"- VIM: <code>vimtutor</code> A long tutorial on vim command line text editor","text":"<ul> <li>Two modes<ul> <li>Insert (input): input or enter content into the file.</li> <li>Edit: move around the file, delete, copy, etc</li> </ul> </li> <li><code>vi</code> ex: <code>vi firstfile</code><ul> <li>If file name does not exist, vi will create one.</li> </ul> </li> <li><code>ZZ</code> (Note: capitals) - Save and exit</li> <li><code>:q!</code> - discard all changes, since the last save, and exit</li> <li><code>:w</code> - save file but don't exit</li> <li><code>:wq</code> - again, save and exit</li> </ul>"},{"location":"Bash/Vi%20Text%20Editor/#navigating-a-file-in-vi","title":"Navigating a file in Vi","text":"<ul> <li><code>Arrow keys</code>- move the cursor around</li> <li><code>j, k, h, l</code>- move the cursor down, up, left and right (similar to the arrow keys)</li> <li><code>^ (caret)</code> - move cursor to beginning of current line</li> <li><code>$</code> - move cursor to end of the current line</li> <li><code>nG</code> - move to the nth line (eg 5G moves to 5th line)</li> <li><code>G</code> - move to the last line</li> <li><code>w</code> - move to the beginning of the next word</li> <li><code>nw</code>- move forward n word (eg 2w moves two words forwards)</li> <li><code>b</code> - move to the beginning of the previous word</li> <li><code>nb</code> - move back n word</li> <li><code>{</code>- move backward one paragraph</li> <li><code>}</code> - move forward one paragraph</li> </ul> <p>If you type <code>:set nu</code> in edit mode within vi it will enable line numbers. I find that turning line numbers on makes working with files a lot easier.</p>"},{"location":"Bash/Vi%20Text%20Editor/#deleting-content","title":"Deleting Content","text":"<ul> <li>x - delete a single character</li> <li>nx - delete n characters (eg 5x deletes five characters)</li> <li>dd - delete the current line</li> <li>dn - d followed by a movement command. Delete to where the movement command would have taken you. (eg d5w means delete 5 words)</li> </ul>"},{"location":"Bash/Vi%20Text%20Editor/#undo","title":"Undo","text":"<ul> <li>u - Undo the last action (you may keep pressing u to keep undoing)</li> <li>U (Note: capital) - Undo all changes to the current line</li> </ul>"},{"location":"Bash/Vi%20Text%20Editor/#other-ways-to-view-files","title":"Other ways to view files","text":"<ul> <li><code>cat</code> Main purpose is to join files together, but can be used for just viewing. Harder to use with ;larger files , because the content will fly across the screen and you can only see the last page.</li> <li>less View files with the ability of scrolling up and down<ul> <li><code>spacebar</code> Skip forward a page</li> <li><code>b</code> Go back a page</li> <li><code>q</code> Quit</li> </ul> </li> </ul>"},{"location":"Hardware/1%20-%20Hardware/","title":"The Hardware Wiki","text":"<ul> <li>Microcontroller Overview</li> <li>ESP32</li> </ul>"},{"location":"Hardware/ESP32/","title":"ESP32 Marauder","text":"<ul> <li>ESP32 Marauder is a suite of WiFi/Bluetooth offensive and defensive tools created for the ESP32</li> <li>The tool itself serves as a portable device used to test and analyze WiFi and Bluetooth devices</li> <li>hosts a suite of capabilities for frame capture, device enumeration, and frame transmission<ul> <li>stand in for physically larger traffic capturing tools and to provide captured data for post-op analysis.</li> </ul> </li> </ul>"},{"location":"Hardware/Microcontrollers/","title":"Microcontrollers","text":"<ul> <li>Microcontroller: Small computer that can be programmed to preform specific tasks</li> <li>ESP32 (I believe wifi?) and arduino are two types with lots of support</li> <li>Micro python is a language to program mirocontrollers like the Pico and ESP32<ul> <li>Easier than C++</li> </ul> </li> <li>ESP32<ul> <li>ESP32 developed by Espressif Systems<ul> <li>Used in Internet of Things (IOT)</li> <li>Wifi and bluetooth support</li> <li>You can also deploy a small webserver on the board to use the tcp/ip networking protocol</li> </ul> </li> </ul> </li> <li>Arduino<ul> <li>Arduino is an open-source platform that consists of hardware (microcontrollers) &amp; software (the Arduino Integrated Development Environment (IDE))<ul> <li>Has a large selection of pre-designed circuits, called \"shields\"<ul> <li>Can be added on to the microcontroller to give it new capabilities</li> </ul> </li> <li>Good for prototyping UGV's (Unmanned Ground Vehicles)</li> </ul> </li> </ul> </li> <li>Raspberry Pi Pico<ul> <li>Smaller &amp; more affordable microcontroller</li> <li>Programmed in C++</li> </ul> </li> </ul>"},{"location":"Python/1%20-%20Python/","title":"The Python Wiki","text":"<ul> <li>Python Cheatsheet</li> <li>Python Misc Notes</li> <li>Python Style Guide</li> <li>Regular Expressions</li> </ul>"},{"location":"Python/1%20-%20Python/#zybooks","title":"ZyBooks","text":"<ul> <li>Chapter 2: Basics</li> <li>Chapter 3: String Formatting</li> <li>Chapter 4: Branching</li> <li>Chapter 5: Looping</li> <li>Chapter 6: Functions</li> <li>Chapter 7: Advanced String Formatting</li> </ul>"},{"location":"Python/1%20-%20Python/#runestone","title":"RuneStone","text":"<ul> <li>Chapter 2 RuneStone</li> <li>Chapter 4: Turtle Graphics</li> <li>Chapter 5: Modules</li> <li>Chapter 6: Functions</li> <li>Chapter 7: Selection</li> <li>Chapter 8: For &amp; While Loops Revisited</li> <li>Chapter 9: Strings</li> <li>Chapter 10: Lists</li> <li>Chapter 11: Files</li> <li>Chapter 17: Classes and Objects</li> <li>Chapter 19: Intro to Inheritance</li> </ul>"},{"location":"Python/Python%20Misc%20Notes/","title":"Python Misc Notes","text":"<p>7.1 Boolean Values and Boolean Expressions#Quick Note</p>"},{"location":"Python/Python%20Misc%20Notes/#boolean","title":"Boolean","text":"<ul> <li>CORRECT:<ul> <li><code>number == 5 or number == 6 or number == 7</code></li> </ul> </li> <li>NOT CORRECT:<ul> <li><code>number == 5 or 6 or 7</code></li> </ul> </li> </ul> <p>Regular Expressions</p>"},{"location":"Python/Python%20Style%20Guide/","title":"Python Style Guide","text":"<p>Python Style Guide</p>"},{"location":"Python/Python%20Style%20Guide/#naming-conventions","title":"Naming Conventions","text":"<ul> <li> <p>Where an existing library has a different style, internal consistency is preferred</p> </li> <li> <p>Never use the characters \u2018l\u2019 (lowercase letter el), \u2018O\u2019 (uppercase letter oh), or \u2018I\u2019 (uppercase letter eye) as single character variable names.</p> </li> <li> <p>Class names should normally use the CapWords convention.</p> </li> <li> <p>Function &amp; variable names should be lowercase, with words separated by underscores as necessary to improve readability.</p> </li> </ul>"},{"location":"Python/Regular%20Expressions/","title":"Regular Expressions","text":""},{"location":"Python/Regular%20Expressions/#official-documentation","title":"Official Documentation","text":""},{"location":"Python/Regular%20Expressions/#remove-numbers-from-string","title":"Remove Numbers from String","text":"<pre><code>#regex module\nimport re\n\n#original string\nstring1 = \"Hello!James12,India2020\"\n\npattern = r'[0-9]'\n\n# Match all digits in the string and replace them with an empty string\nnew_string = re.sub(pattern, '', string1)\n\nprint(new_string)\n\n'''Output\nHello!James,India\n'''\n</code></pre>"},{"location":"Python/Regular%20Expressions/#useful-examples-of-splitting","title":"Useful Examples of Splitting","text":"<pre><code># Python3 code to demonstrate working of\n# Add space between Numbers and Alphabets in String\n# using regex + sub()\nimport re\n\n# initializing string\ntest_str = 'geeks4geeks is1for10geeks'\n\n# printing original String\nprint(\"The original string is : \" + str(test_str))\n\n# using sub() to solve the problem\nres = re.sub('(\\d+(\\.\\d+)?)', r' \\1 ', test_str)\n\n# printing result\nprint(\"The space added string : \" + str(res))\n\n'''Ouput\n\nThe original string is : geeks4geeks is1for10geeks\nThe space added string : geeks 4 geeks is 1 for 10 geeks\n'''\n</code></pre> <pre><code># Python3 code to demonstrate working of\n# Splitting text and number in string\n# Using re.compile() + re.match() + re.groups()\nimport re\n\n# initializing string\ntest_str = \"Geeks4321\"\n\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\n# Using re.compile() + re.match() + re.groups()\n# Splitting text and number in string\ntemp = re.compile(\"([a-zA-Z]+)([0-9]+)\")\nres = temp.match(test_str).groups()\n\n# printing result\nprint(\"The tuple after the split of string and number : \" + str(res))\n\n'''Output\nThe original string is : Geeks4321\nThe tuple after the split of string and number : ('Geeks', '4321')\n'''\n</code></pre> <p>Cheat Sheet</p>"},{"location":"Python/RuneStone%20Python/Chapter%2010%20RuneStone/","title":"Chapter 10: Lists","text":"<ul> <li>A list within another list is said to be nested and the inner list is often called a sublist.</li> </ul> <pre><code>[\"hello\", 2.0, 5, [10, 20]]\n</code></pre> <ul> <li><code>in</code> and <code>not in</code> are boolean operators that test membership in a sequence. We used them previously with strings and they also work here.</li> <li>Again, as with strings, the <code>+</code> operator concatenates lists. Similarly, the <code>*</code> operator repeats the items in a list a given number of times.</li> </ul> <pre><code>a_list = ['a', 'b', 'c', 'd', 'e', 'f']\nprint(a_list[1:3])\nprint(a_list[:4])\nprint(a_list[3:])\nprint(a_list[:]) \n</code></pre> <ul> <li><code>b = a[:]   # make a clone using slice</code></li> <li>List Methods</li> </ul> <ul> <li>It is also important to realize that with append, the original list is simply modified. On the other hand, with concatenation, an entirely new list is created.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2019%20Runestone/","title":"Chapter 19: Intro to Inheritance","text":""},{"location":"Python/RuneStone%20Python/Chapter%2019%20Runestone/#191-pillars-of-object-oriented-programming-oop","title":"19.1 Pillars of Object-Oriented Programming (OOP)","text":"<ul> <li>Object-oriented programming involves four key ideas: encapsulation, information hiding, inheritance, and polymorphism</li> <li>Encapsulation is the idea that a class can package some data together with the methods that manipulate the data.<ul> <li>This is a powerful capability, and the chief idea that distinguishes OOP from structured programming</li> </ul> </li> <li>Information Hiding promotes quality code by allowing objects to protect their state against direct manipulation by code using the object.<ul> <li>Python, like many languages, provides mechanisms to achieve information hiding, but is not covered in Runestone Academy: LEARN THIS</li> </ul> </li> <li>Inheritance and polymorphism are mechanisms that help to enable code reuse and contract-based programming, and are the subject of this chapter.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2019%20Runestone/#192-intro-to-inheritance","title":"19.2 Intro to Inheritance","text":"<ul> <li> <p>Recall Point class from chapter 17: <pre><code>class Point:\n\n    def __init__(self, initX, initY):\n        self.x = initX\n        self.y = initY\n\n    def distanceFromOrigin(self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n\n    def __str__(self):\n        return \"x=\" + str(self.x) + \", y=\" + str(self.y)\n\np = Point(7, 6)\nprint(p)\n</code></pre></p> <p>x=7, y=6</p> </li> <li> <p>Now we want to create a class that works like <code>Point</code>, but also keeps track of a short description for the point.</p> </li> <li>Create a <code>LabeledPoint</code> class by copying and pasting the definition for <code>Point</code>, changing the name to <code>LabeledPoint</code>, and modifying the class to suit our purposes.</li> <li> <p>Inheritance provides a way to reuse the definition of Point without having to copy and paste. <pre><code>class LabeledPoint(Point):  #This example defines a class named LabeledPoint that inherits from the Point class.\n    pass\n</code></pre></p> </li> <li> <p>Putting the name <code>Point</code> in parenthesis tells Python that the new class, <code>LabeledPoint</code>, begins with all of the methods defined in its parent, <code>Point</code></p> </li> <li> <p>For example, we can instantiate LabeledPoint using the Point constructor, and invoke any Point methds we want to on it: <pre><code>p = LabeledPoint(7,6)\ndist = p.distanceFromOrigin()\n</code></pre></p> </li> <li> <p>Now, let\u2019s refine LabeledPoint so that it holds a label, along with the x and y coordinates: <pre><code>class LabeledPoint(Point):\n\n    def __init__(self, initX, initY, label):\n        self.x = initX\n        self.y = initY\n            elf.label = label\n\n    def __str__(self):\n        return \"x=\" + str(self.x) + \", y=\" + str(self.y) + \" (\" + self.label + \")\"\n\nlabeledPt = LabeledPoint(7,6,\"Here\")\nprint(labeledPt)\n</code></pre></p> <p>x=7, y=6 x=7, y=6 (Here)</p> </li> <li> <p>We redefined two of the methods that LabeledPoint inherits from Point: <code>__init__()</code> and <code>__str__()</code> This is called overriding</p> </li> <li>When both the parent class and child class have a method with the same name, the method on an instance of the child class executes code in the child\u2019s class</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%202%20RuneStone/","title":"Chapter 2: Some Basics","text":"<ul> <li>Triple quoted strings can span multiple lines<ul> <li><code>print(\"\"\"This message will span several lines of the text.\"\"\")</code><ul> <li>Output:<ul> <li>This message will span several lines of the text.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%202%20RuneStone/#variable-names-and-keywords","title":"Variable Names and Keywords","text":"<ul> <li>Never can contain spaces</li> <li>Must begin with a letter</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%202%20RuneStone/#statements-and-expressions","title":"Statements and Expressions","text":"<ul> <li>len() is a built-in Python function that returns the number of characters in a string.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%202%20RuneStone/#operators-and-operands","title":"Operators and Operands","text":"<ul> <li>Modulo example<ul> <li><code>total_secs = 7684 hours = total_secs // 3600 secs_still_remaining = total_secs % 3600 minutes = secs_still_remaining // 60 secs_finally_remaining = secs_still_remaining % 60</code></li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%208%20RuneStone/","title":"Chapter 8: For &amp; While Loops Revisited","text":"<ul> <li> <p>Recall that the <code>for</code>loop processes each item in a list</p> <ul> <li>Each item in turn is (re-)assigned to the loop variable, and the body of the loop is executed</li> </ul> <pre><code>for f in [\"Joe\", \"Amy\", \"Brad\", \"Angelina\", \"Zuki\", \"Thandi\", \"Paris\"]:\n    print(\"Hi\", f, \"Please come to my party on Saturday\")\n</code></pre> </li> <li> <p>We have also seen iteration paired with the update idea to form the accumulator pattern</p> <ul> <li>we could create a for loop using the <code>range</code>to produce the numbers 1 through n.</li> <li>we can start with a running total variable initialized to 0 and on each iteration, add the current value of the loop variable.</li> </ul> <p>Example</p> <pre><code>def sumTo(aBound):\n    theSum = 0\n    for aNumber in range(1, aBound + 1):\n        theSum = theSum + aNumber\n\n    return theSum\n\nprint(sumTo(4))\n\nprint(sumTo(1000))\n</code></pre> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%208%20RuneStone/#zachs-notes","title":"Zach\u2019s Notes","text":""},{"location":"Python/RuneStone%20Python/Chapter%208%20RuneStone/#very-clever-double-loop","title":"Very clever double loop","text":"<ul> <li>Run through two lists in one loop</li> </ul> <pre><code>names = [\"Aman\", \"Hritika\", \"Akanksha\"]\nage = [22, 21, 24]\nindex = 0\nfor i in names:\n    print(\"My Name is \", names[index], \"I am \", age[index], \"years old\")\n    index = index + 1\n\n'''Ouput\nMy Name is  Aman I am  22 years old\nMy Name is  Hritika I am  21 years old\nMy Name is  Akanksha I am  24 years old\n'''\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%208%20RuneStone/#83-the-while-statement","title":"8.3 The <code>while</code> Statement","text":"<p>The example above but with a <code>while</code> loop (easier to understand imo)</p> <pre><code>def sumTo(aBound):\n\"\"\" Return the sum of 1+2+3 ... n \"\"\"\n\n    theSum  = 0\n    aNumber = 1\n    while aNumber &lt;= aBound:\n        theSum = theSum + aNumber\n        aNumber = aNumber + 1\n    return theSum\n\nprint(sumTo(4))\n\nprint(sumTo(1000))\n</code></pre> <p>More formally, here is the flow of execution for a <code>while</code> statement:</p> <ol> <li>Evaluate the condition, yielding <code>False</code> or <code>True</code>.</li> <li>If the condition is <code>False</code>, exit the <code>while</code> statement and continue execution at the next statement.</li> <li>If the condition is <code>True</code>, execute each of the statements in the body and then go back to step 1.</li> </ol>"},{"location":"Python/RuneStone%20Python/Chapter%208%20RuneStone/#warning","title":"Warning","text":"<ul> <li>After the initial test, any following tests come only after the execution of the whole body, even if the condition becomes false in the middle of the loop body.</li> <li>The body of the loop should change the value of one or more variables so that eventually the condition becomes <code>False</code>and the loop terminates.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.1%2011.2%20Locating%20and%20Working%20with%20Files/","title":"11.1/11.2 Locating and Working with Files","text":""},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.1%2011.2%20Locating%20and%20Working%20with%20Files/#111-working-with-data-files","title":"11.1 Working With Data Files","text":"<ul> <li>In Python, we must open files before we can use them and close them when we are done with them</li> <li>Once a file is opened it becomes a Python object just like all other data</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.1%2011.2%20Locating%20and%20Working%20with%20Files/#112-finding-a-file-on-your-disk","title":"11.2 Finding a File on your Disk","text":"<ul> <li>Here\u2019s the important rule to remember: If your file and your Python program are in the same directory you can simply use the filename like this: <code>open('myfile.txt', 'r')</code></li> <li>If your file and your Python program are in different directories then you must refer to one or more directories:<ul> <li>in a relative file path to the file like this: <code>open('../myData/data3.txt', 'r')</code></li> <li>or in an absolute file path like <code>open('/users/bmiller/myFiles/allProjects/myData/data3.txt', 'r')</code></li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.3%2011.4%20Reading%20a%20File%20%26%20Iterating%20over%20lines/","title":"11.3/11.4 Reading a File &amp; Iterating over lines in a file","text":""},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.3%2011.4%20Reading%20a%20File%20%26%20Iterating%20over%20lines/#113-reading-a-file","title":"11.3 Reading a File","text":"<ul> <li>To open this file, we would call the <code>open</code> function</li> <li>The variable, <code>fileref</code> , now holds a reference to the file object returned by <code>open</code></li> <li>When we are finished with the file, we can close it by using the <code>close</code> method.<ul> <li>After the file is closed any further attempts to use <code>fileref</code> will result in an error.</li> </ul> </li> </ul> <pre><code>&gt;&gt;&gt;fileref = open(\"ccdata.txt\", \"r\")\n&gt;&gt;&gt;\n&gt;&gt;&gt;fileref.close()\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.3%2011.4%20Reading%20a%20File%20%26%20Iterating%20over%20lines/#114-iterating-over-lines-in-a-file","title":"11.4 Iterating over lines in a file","text":"<ul> <li>Example file:</li> </ul> <ul> <li>Example code for file</li> </ul> <pre><code>ccfile = open(\"ccdata.txt\", \"r\")\n\nfor aline in ccfile:\n    values = aline.split()\n    print('In', values[0], 'the average temp. was', values[1], '\u00b0C and CO2 emmisions were', values[2], 'gigatons.')\n\nccfile.close()\n</code></pre> <pre><code>Output\nIn 1850 the average temp. was -0.37 \u00b0C and CO2 emmisions were 2.24E-7 gigatons.\nIn 1860 the average temp. was -0.34 \u00b0C and CO2 emmisions were 3.94E-7 gigatons.\nIn 1870 the average temp. was -0.28 \u00b0C and CO2 emmisions were 6.6E-7 gigatons.\nIn 1880 the average temp. was -0.24 \u00b0C and CO2 emmisions were 1.1 gigatons.\nIn 1890 the average temp. was -0.42 \u00b0C and CO2 emmisions were 1.72 gigatons.\nIn 1900 the average temp. was -0.2 \u00b0C and CO2 emmisions were 2.38 gigatons.\nIn 1910 the average temp. was -0.49 \u00b0C and CO2 emmisions were 3.34 gigatons.\nIn 1920 the average temp. was -0.25 \u00b0C and CO2 emmisions were 4.01 gigatons.\nIn 1930 the average temp. was -0.14 \u00b0C and CO2 emmisions were 4.53 gigatons.\nIn 1940 the average temp. was 0.01 \u00b0C and CO2 emmisions were 5.5 gigatons.\nIn 1950 the average temp. was -0.17 \u00b0C and CO2 emmisions were 6.63 gigatons.\nIn 1960 the average temp. was -0.05 \u00b0C and CO2 emmisions were 10.5 gigatons.\nIn 1970 the average temp. was -0.03 \u00b0C and CO2 emmisions were 16 gigatons.\nIn 1980 the average temp. was 0.09 \u00b0C and CO2 emmisions were 20.3 gigatons.\nIn 1990 the average temp. was 0.3 \u00b0C and CO2 emmisions were 22.6 gigatons.\nIn 2000 the average temp. was 0.29 \u00b0C and CO2 emmisions were 24.9 gigatons.\nIn 2010 the average temp. was 0.56 \u00b0C and CO2 emmisions were 32.7 gigatons.\nIn 2019 the average temp. was 0.74 \u00b0C and CO2 emmisions were 33.3 gigatons.\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.5%20Alternative%20File%20Reading%20Methods/","title":"11.5 Alternative File Reading Methods","text":"<ul> <li>In addition to the <code>for</code> loop, Python provides three methods to read data from the input file.</li> <li>The <code>readline</code> method reads one line from the file and returns it as a string.<ul> <li>The string returned by <code>readline</code> will contain the newline character at the end</li> <li>This method returns the empty string when it reaches the end of the file.</li> <li><code>readlines</code> method returns the contents of the entire file as a list of strings<ul> <li>each item in the list represents one line of the file</li> </ul> </li> </ul> </li> <li>It is also possible to read the entire file into a single string with <code>read</code></li> <li>Note that we need to reopen the file before each read so that we start from the beginning</li> <li>Each file has a marker that denotes the current read position in the file<ul> <li>Any time one of the read methods is called the marker is moved to the character immediately following the last character returned</li> <li><code>readline</code> this moves the marker to the first character of the next line in the file</li> <li><code>read</code> or <code>readlines</code> the marker is moved to the end of the file.</li> </ul> </li> </ul> <pre><code>&gt;&gt;&gt; infile = open(\"ccdata.txt\", \"r\")\n&gt;&gt;&gt; aline = infile.readline()\n&gt;&gt;&gt; aline\n'1850\\-0.37\\2.24E-7\\n'\n&gt;&gt;&gt;\n&gt;&gt;&gt; infile = open(\"ccdata.txt\", \"r\")\n&gt;&gt;&gt; linelist = infile.readlines()\n&gt;&gt;&gt; print(len(linelist))\n18\n&gt;&gt;&gt; print(linelist[0:4])\n['1850\\-0.37\\2.24E-7\\n', \n'1860\\-0.34\\3.94E-7\\n', \n'1870\\-0.28\\6.6E-7\\n', \n'1880\\-0.24\\1.1\\n']\n&gt;&gt;&gt;\n&gt;&gt;&gt; infile = open(\"ccdata.txt\", \"r\")\n&gt;&gt;&gt; filestring = infile.read()\n&gt;&gt;&gt; print(len(filestring))\n1282\n&gt;&gt;&gt; print(filestring[:256])\n1850 -0.37 2.24E-7\n1860 -0.34 3.94E-7\n1870 -0.28 6.6E-7\n1880 -0.24\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.5%20Alternative%20File%20Reading%20Methods/#reading-file-with-while-loop","title":"Reading file with while loop","text":"<ul> <li>This is important because many other programming languages do not support the <code>for</code> loop style for reading files but they do support the pattern we\u2019ll show you here.</li> </ul> <pre><code>infile = open(\"ccdata.txt\", \"r\")\nline = infile.readline()\nwhile line:\n    values = line.split()\n    print('In', values[0], 'the average temp. was', values[1], '\u00b0C and CO2 emmisions were', values[2], 'gigatons.')\n    line = infile.readline()\n\ninfile.close()\n</code></pre> <pre><code>In 1850 the average temp. was -0.37 \u00b0C and CO2 emmisions were 2.24E-7 gigatons.\nIn 1860 the average temp. was -0.34 \u00b0C and CO2 emmisions were 3.94E-7 gigatons.\nIn 1870 the average temp. was -0.28 \u00b0C and CO2 emmisions were 6.6E-7 gigatons.\nIn 1880 the average temp. was -0.24 \u00b0C and CO2 emmisions were 1.1 gigatons.\nIn 1890 the average temp. was -0.42 \u00b0C and CO2 emmisions were 1.72 gigatons.\nIn 1900 the average temp. was -0.2 \u00b0C and CO2 emmisions were 2.38 gigatons.\nIn 1910 the average temp. was -0.49 \u00b0C and CO2 emmisions were 3.34 gigatons.\nIn 1920 the average temp. was -0.25 \u00b0C and CO2 emmisions were 4.01 gigatons.\nIn 1930 the average temp. was -0.14 \u00b0C and CO2 emmisions were 4.53 gigatons.\nIn 1940 the average temp. was 0.01 \u00b0C and CO2 emmisions were 5.5 gigatons.\nIn 1950 the average temp. was -0.17 \u00b0C and CO2 emmisions were 6.63 gigatons.\nIn 1960 the average temp. was -0.05 \u00b0C and CO2 emmisions were 10.5 gigatons.\nIn 1970 the average temp. was -0.03 \u00b0C and CO2 emmisions were 16 gigatons.\nIn 1980 the average temp. was 0.09 \u00b0C and CO2 emmisions were 20.3 gigatons.\nIn 1990 the average temp. was 0.3 \u00b0C and CO2 emmisions were 22.6 gigatons.\nIn 2000 the average temp. was 0.29 \u00b0C and CO2 emmisions were 24.9 gigatons.\nIn 2010 the average temp. was 0.56 \u00b0C and CO2 emmisions were 32.7 gigatons.\nIn 2019 the average temp. was 0.74 \u00b0C and CO2 emmisions were 33.3 gigatons.\n</code></pre> <ul> <li>There are several important things to notice in this code:<ul> <li>On line 2 we have the statement <code>line = infile.readline()</code><ul> <li>We call this initial read the priming read.</li> <li>It is very important because the while condition needs to have a value for the <code>line</code> variable.</li> </ul> </li> <li><code>readline</code> method will return the empty string if there is no more data in the file.<ul> <li>When Python is looking for a Boolean condition, as in <code>while line:</code>, it treats an empty sequence type as <code>False</code>, and a non-empty sequence as <code>True</code></li> <li>So, the only way that a line of data from the file can be empty is if you are reading at the end of the file, and the <code>while</code> condition becomes <code>False</code>.</li> </ul> </li> <li>Notice that the last line of the body of the <code>while</code> loop performs another <code>readline</code><ul> <li>This statement will reassign the variable <code>line</code> to the next line of the file</li> <li>It represents the change of state that is necessary for the iteration to function correctly.</li> <li>Without it, there would be an infinite loop processing the same line of data over and over.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.6%20Writing%20Text%20Files/","title":"11.6 Writing Text Files","text":"<p>Note in Table 1 in 11.1 that the only difference between opening a file for writing and opening a file for reading is the use of the  <code>w</code> flag instead of the <code>r</code> flag as the second parameter. - <code>open(filename,'r')</code> for open and read a file - <code>open(filename,'w')</code> for open and write a file - <code>filevariable.close()</code> close a file</p> <ul> <li>Table 2 in 11.5 shows the <code>write</code> function to add data to text file.</li> <li>Notice that the <code>write</code> method takes one parameter, a string.<ul> <li>When used, the characters of the string will be added to the end of the file.</li> <li>YOUR job to add a newline if desired<ul> <li>When writing, you need to include a newline <code>\\n</code></li> </ul> </li> </ul> </li> <li> <p>Example in the title, then a good while loop example <pre><code>infile = open(\"ccdata.txt\", \"r\")\naline = infile.readline()\nprint(\"Year\\tEmmision\\n\")\nwhile aline:\n    items = aline.split()\n    dataline = items[0] + '\\t' + items[2]\n    print(dataline)\n    aline = infile.readline()\n\ninfile.close()\n</code></pre></p> <p>Year    Emmision</p> <p>1850    2.24E-7 1860    3.94E-7 1870    6.6E-7 1880    1.1 1890    1.72 1900    2.38 1910    3.34 1920    4.01 1930    4.53 1940    5.5 1950    6.63 1960    10.5 1970    16 1980    20.3 1990    22.6 2000    24.9 2010    32.7 2019    33.3</p> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.6%20Writing%20Text%20Files/#creating-an-output-file","title":"Creating an output file","text":"<ul> <li>To start, we need to open a new output file by adding another call to the <code>open</code> function, <code>outfile = open(\"emissiondata.txt\",'w')</code>, using the <code>w</code> flag.</li> <li>We can choose any file name we like. If the file does not exist, it will be created. However, if the file does exist, it will be overwritten</li> <li>Once the file has been created, we just need to call the <code>write</code> method passing the string that we wish to add to the file.</li> <li> <p>In the previous case, the string is already being printed so we will just change the <code>print</code> into a <code>write</code> method.</p> <ul> <li>A newline needs to be added as well <pre><code>infile = open(\"ccdata.txt\", \"r\")\noutfile = open(\"emissiondata.txt\", \"w\")\n\naline = infile.readline()\noutfile.write(\"Year \\tEmmision\\n\")\nwhile aline:\n    items = aline.split()\n    dataline = items[0] + '\\t' + items[2]\n    outfile.write(dataline + '\\n')\n    aline = infile.readline()\n\ninfile.close()\noutfile.close()\n</code></pre></li> </ul> <p>Output in emmissiondata.txt: Year    Emmision 1850    2.24E-7 1860    3.94E-7 1870    6.6E-7 1880    1.1 1890    1.72 1900    2.38 1910    3.34 1920    4.01 1930    4.53 1940    5.5 1950    6.63 1960    10.5 1970    16 1980    20.3 1990    22.6 2000    24.9 2010    32.7 2019    33.3</p> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.7%2011.8%20With%20Statements%20and%20Web%20Fetching/","title":"11.7 11.8 With Statements and Web Fetching","text":"<ul> <li>The with method automatically closes the file when finished, which is good, cause people forget</li> <li>Context Manager</li> <li>Automates the process of doing common operations at the start of some tasks, as well as automating some operations at the end of some tasks.</li> <li>The Python with statement makes using context managers easy. The general form of a with statement is: <pre><code>with &lt;create some object that understands context&gt; as &lt;some name&gt;:\n    do some stuff with the object\n    ...\n</code></pre></li> <li>When the program exits the with block, the context manager handles the common stuff that normally happens. For example closing a file.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.7%2011.8%20With%20Statements%20and%20Web%20Fetching/#example","title":"Example","text":"<pre><code>mydata.txt\n1 2 3\n4 5 6 \n</code></pre> <pre><code>with open('mydata.txt') as md:\n    print(md)\n    for line in md:\n        print(line)\nprint(md)\n</code></pre> <pre><code>&lt;openfile 'mydata.txt', mode 'r'&gt;\n1 2 3\n\n4 5 6\n\n&lt;closedfile 'mydata.txt', mode 'r'&gt;\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/11.7%2011.8%20With%20Statements%20and%20Web%20Fetching/#118-fetching-something-from-the-web","title":"11.8 Fetching Something From The Web","text":"<ul> <li>We\u2019ll need permission to write to the destination filename, and the file will be created in the \u201ccurrent directory\u201d - i.e. the same folder that the Python program is saved in.</li> <li>If we are behind a proxy server that requires authentication, (as some students are), this may require some more special handling to work around our proxy. Use a local resource for the purpose of this demonstration!</li> <li>We will try to retrieve the content of the HTML of this page as in the following code. <pre><code>import urllib.request\n\ndef retrieve_page(url):\n\"\"\" Retrieve the contents of a web page.\n    \"\"\"\n    my_socket = urllib.request.urlopen(url)\n    dta = my_socket.read()\n    return dta\n\nthe_text = retrieve_page(\"https://runestone.academy/runestone/books/published/thinkcspy/Files/FetchingSomethingFromTheWeb.html\")\nprint(the_text)\n</code></pre></li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2011%20Files/Chapter%2011%20RuneStone/","title":"Chapter 11: Files","text":"<ul> <li>11.1 11.2 Locating and Working with Files</li> <li>11.3 11.4 Reading a File &amp; Iterating over lines</li> <li>11.5 Alternative File Reading Methods</li> <li>11.6 Writing Text Files</li> <li>11.7 11.8 With Statements and Web Fetching</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.4%20User%20Defined%20Classes/","title":"17.4 User Defined Classes","text":"<ul> <li>We\u2019ve already seen classes like <code>str</code> <code>int</code> <code>float</code> and <code>turtle</code></li> <li>In many cases when we are solving problems we need to create data objects that are related to the problem we are trying to solve. We need to create our own classes.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.4%20User%20Defined%20Classes/#walk-through-example","title":"Walk-through Example","text":"<ul> <li> <p><code>point</code> object     </p> </li> <li> <p>Some of the typical operations that one associates with points might be to ask the point for its x coordinate, <code>getX</code> , or to ask for its y coordinate, <code>getY</code> </p> </li> <li> <p>Now that we understand what a <code>point</code> object might look like, we can define a new class.</p> </li> <li>We\u2019ll want our points to each have an <code>x</code> and a <code>y</code> attribute, so our first class definition looks like this:</li> </ul> <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self):\n\"\"\" Create a new point at the origin \"\"\"\n        self.x = 0\n        self.y = 0\n</code></pre> <ul> <li>Class definitions can appear anywhere in a program, but they are usually near the beginning (after the <code>import</code> statements)</li> <li>The syntax rules for a class definition are the same as for other compound statements.<ul> <li>Header which begins with the keyword, <code>class</code> , followed by the name of the class, and ending with a colon.</li> </ul> </li> <li>If the first line after the class header is a string, it becomes the docstring of the class, and will be recognized by various tools. DON'T FORGET DOCSTRINGS<ul> <li>This is also the way docstrings work in functions.</li> </ul> </li> <li>Every class should have a method with the special name <code>__init__</code><ul> <li>This initializer method, often referred to as the constructor, is automatically called whenever a new instance of our <code>Point</code> object is created.</li> <li>It gives the programmer the opportunity to set up the attributes required within the new instance by giving them their initial state values<ul> <li>The <code>self</code> parameter (you could choose any other name, but nobody ever does!) is automatically set to reference the newly-created object that needs to be initialized.</li> </ul> </li> </ul> </li> </ul> <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self):\n\"\"\" Create a new point at the origin \"\"\"\n        self.x = 0\n        self.y = 0\n\np = Point()         # Instantiate an object of type Point\nq = Point()         # and make a second point\n</code></pre> <ul> <li>During the initialization of the objects, we created two attributes called x and y for each, and gave them both the value 0.</li> <li> <p>Two <code>Points</code> have been created, each having an x and y coordinate with value 0.  </p> </li> <li> <p>Note</p> <ul> <li>The assignments are not to <code>x</code> and <code>y</code>, but to <code>self.x</code> and <code>self.y</code>. The attributes <code>x</code> and <code>y</code> are always attached to a particular instance. The instance is always explicitly referenced with dot notation.</li> </ul> </li> <li>The variables <code>p</code> and <code>q</code> are assigned references to two new <code>Point</code> objects</li> <li>A function like <code>Turtle</code> or <code>Point</code> that creates a new object instance is called a constructor</li> <li>Every class automatically uses the name of the class as the name of the constructor function.</li> <li>The definition of the constructor function is done when you write the <code>__init__</code> function.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.4%20User%20Defined%20Classes/#metaphor","title":"Metaphor:","text":"<ul> <li>The class itself isn\u2019t an instance of a point, but it contains the machinery to make point instances</li> <li>Every time you call the constructor, you\u2019re asking the factory to make you a new object</li> <li>As the object comes off the production line, its initialization method is executed to get the object properly set up with its factory default settings</li> <li>The combined process of \u201cmake me a new object\u201d and \u201cget its settings initialized to the factory default settings\u201d is called instantiation.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.5%2017.6%20Constructer%20and%20Methods/","title":"17.5, 17.6: Constructers and Methods","text":""},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.5%2017.6%20Constructer%20and%20Methods/#175-improving-our-constructor","title":"17.5 Improving our Constructor","text":"<ul> <li>Our constructor so far can only create points at location <code>(0,0)</code></li> <li>To create a point at position (7, 6) requires that we provide some additional capability for the user to pass information to the constructor.</li> <li>Since constructors are simply specially named functions, we can use parameters (as we\u2019ve seen before) to provide the specific information.</li> <li>We can make our class constructor more general by putting extra parameters into the <code>__init__</code> method: <code>self.x = initX</code> &amp; <code>self.y = inity</code></li> </ul> <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self, initX, initY):\n\"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\np = Point(7, 6)\n</code></pre> <ul> <li>Now when we create new points, we supply the x and y coordinates as parameters. When the point is created, the values of\ufeff <code>initX</code> and \ufeff<code>initY</code> are assigned to the state of the object.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.5%2017.6%20Constructer%20and%20Methods/#176-adding-other-methods-kinda-functions-to-our-class","title":"17.6 Adding other Methods (kinda functions) to our Class","text":"<ul> <li>Rather than using a tuple for our points, <code>(7, 6)</code> , we can use the <code>Point</code> class we made to add methods for operations on the points given</li> <li>Creating a class like <code>Point</code> brings an exceptional amount of \u201corganizational power\u201d to our programs, and to our thinking.</li> <li>A method behaves like a function but it is invoked on a specific instance.</li> <li>For example, with a turtle named <code>tess</code>, <code>tess.right(90)</code> asks the <code>tess</code> object to perform its <code>right</code> method and turn 90 degrees</li> <li>Methods are accessed using dot notation.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.5%2017.6%20Constructer%20and%20Methods/#example","title":"Example:","text":"<ul> <li>The <code>getX</code> method, when invoked, will return the value of the x coordinate.<ul> <li>The implementation of this method is straight forward since we already know how to write functions that return values</li> </ul> </li> <li>Even though the <code>get</code> X method does not need any other parameter information to do its work, there is still one formal parameter, <code>self</code><ul> <li>All methods defined in a class that operate on objects of that class will have self as their first parameter. <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self, initX, initY):\n\"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\n\n    def getX(self):\n        return self.x\n\n    def getY(self):\n        return self.y\n\n\np = Point(7, 6)\nprint(p.getX())\nprint(p.getY())\n</code></pre></li> </ul> </li> </ul> <p>Output: <code>7</code> <code>6</code></p> <ul> <li> <p>Note that the <code>getX</code> &amp; <code>getY</code> method simply returns the value of <code>self.x</code> &amp; <code>self.y</code> from the object itself.</p> <ul> <li>In other words, the implementation of the method is to go to the state of the object itself and get the value of <code>x</code> &amp; <code>y</code></li> </ul> </li> <li> <p>Example:</p> </li> <li>Let\u2019s add another method, <code>distanceFromOrigin</code></li> <li> <p>This method will again not need any additional information to do its work. <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self, initX, initY):\n\"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\n\n    def getX(self):\n        return self.x\n\n    def getY(self):\n        return self.y\n\n    def distanceFromOrigin(self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n\n\np = Point(7, 6)\nprint(p.distanceFromOrigin())\n</code></pre></p> <p>9.219544457292887</p> </li> <li> <p>Notice that the caller of <code>distanceFromOrigin</code> does not explicitly supply an argument to match the <code>self</code> parameter.</p> </li> <li>This is true of all method calls</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.7%2017.8%2017.9%20Objects%2C%20Strings%2C%20Return%20Values/","title":"17.7, 17.8, 17.9: Objects, Strings, Return Values","text":""},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.7%2017.8%2017.9%20Objects%2C%20Strings%2C%20Return%20Values/#177-objects-as-arguements-and-parameters","title":"17.7 Objects as Arguements and Parameters","text":"<ul> <li>You can use the object/classes as arguments in a functions</li> <li> <p>Function calling the Point object we created: <pre><code>def distance(point1, point2):\n    xdiff = point2.getX() - point1.getX()\n    ydiff = point2.getY() - point1.getY()\n\n    dist = math.sqrt(xdiff**2 + ydiff**2)\n    return dist\n\np = Point(4, 3)\nq = Point(0, 0)\nprint(distance(p, q))\n</code></pre></p> <p>5.0</p> </li> <li> <p><code>distance</code> takes two points and returns the distance between them.</p> </li> <li>Note that <code>distance</code> is not a method of the Point class, it is a standalone function.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.7%2017.8%2017.9%20Objects%2C%20Strings%2C%20Return%20Values/#178-converting-an-object-to-a-string","title":"17.8 Converting an Object to a String","text":"<ul> <li>When we\u2019re working with classes and objects, it is often necessary to print an object (that is to print the state of an object).</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.7%2017.8%2017.9%20Objects%2C%20Strings%2C%20Return%20Values/#example","title":"Example","text":"<ul> <li> <p>The default print statement for an object is to tell you the type the object is. <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self, initX, initY):\n\"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\n\n    def getX(self):\n        return self.x\n\n    def getY(self):\n        return self.y\n\n    def distanceFromOrigin(self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n\n\np = Point(7, 6)\nprint(p)\n</code></pre></p> <p>&lt;main.Point object&gt;</p> </li> <li> <p>It does not tell you anything about the specific state of the point.</p> </li> <li>We can improve on this representation if we include a special method call <code>__str__</code> in the Point object/class</li> <li><code>_str__ method</code> is responsible for returning a string representation as defined by the class creator.</li> <li> <p>You as the programmer, get to choose what a <code>Point</code> should look like when it gets printed. <pre><code>class Point:\n\"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n\n    def __init__(self, initX, initY):\n\"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\n\n    def getX(self):\n        return self.x\n\n    def getY(self):\n        return self.y\n\n    def distanceFromOrigin(self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n\n    def __str__(self):\n        return \"x=\" + str(self.x) + \", y=\" + str(self.y)\n\np = Point(7, 6)\nprint(p)\n</code></pre></p> <p>x=7, y=6</p> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/17.7%2017.8%2017.9%20Objects%2C%20Strings%2C%20Return%20Values/#179-instances-as-return-values","title":"17.9 Instances as Return Values","text":"<ul> <li>Functions and methods can return objects (Obviously)</li> <li>Example: Have a point object and wish to find the midpoint halfway between it and some other target point.</li> <li> <p>Method, called <code>halfway</code> that takes another <code>Point</code> as a parameter and returns the <code>Point</code> that is halfway between the point and the target. <pre><code>class Point:\n\n    def __init__(self, initX, initY):\n\"\"\" Create a new point at the given coordinates. \"\"\"\n        self.x = initX\n        self.y = initY\n\n    def getX(self):\n        return self.x\n\n    def getY(self):\n        return self.y\n\n    def distanceFromOrigin(self):\n        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n\n    def __str__(self):\n        return \"x=\" + str(self.x) + \", y=\" + str(self.y)\n\n    def halfway(self, target):\n        mx = (self.x + target.x) / 2\n        my = (self.y + target.y) / 2\n        return Point(mx, my)\n\np = Point(3, 4)\nq = Point(5, 12)\nmid = p.halfway(q)\n\nprint(mid)\nprint(mid.getX())\nprint(mid.getY())\n</code></pre></p> <p>x=4.0, y=8.0 4.0 8.0</p> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/Chapter%2017%20Runestone/","title":"Chapter 17: Classes and Objects","text":"<ul> <li>17.4 User Defined Classes</li> <li>17.5 17.6 Constructer and Methods</li> <li>17.7 17.8 17.9 Objects, Strings, Return Values</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/Chapter%2017%20Runestone/#171-object-oriented-programming-oop","title":"17.1 Object-oriented programming (OOP)","text":"<ul> <li>Main programming paradigm used in the creation of new software.</li> <li>Developed as a way to handle the rapidly increasing size and complexity of software systems and to make it easier to modify these large and complex systems over time.</li> <li>Up to now, some of the programs we have been writing use a procedural programming paradigm</li> <li>Procedural programming (what we've used up until now) focuses on writing functions or procedures which operate on data</li> <li>Object-oriented programming focuses on the creation of objects which contain both data and functionality together</li> <li>Usually, each object definition corresponds to some object or concept in the real world<ul> <li>The functions that operate on that object correspond to the ways real-world objects interact.</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/Chapter%2017%20Runestone/#172-a-change-of-perspective","title":"17.2 A Change of Perspective","text":"<ul> <li>We wrote functions and called them using a syntax such as <code>drawCircle(tess)</code><ul> <li>This suggests that the function is the active agent.</li> </ul> </li> <li>In object-oriented programming, the objects are considered the active agents.<ul> <li>For example, in our early introduction to turtles, we used an object-oriented style. We said <code>tess.forward(100)</code>, which asks the turtle to move itself forward by the given number of steps.</li> <li>An invocation like <code>tess.circle()</code> says \u201cHey tess! Please use your circle method!\u201d</li> </ul> </li> <li>This change in perspective is sometimes considered to be a more \u201cpolite\u201d way to write programming instructions</li> <li>Often times shifting responsibility from the functions onto the objects makes it possible to write more versatile functions and makes it easier to maintain and reuse code.</li> <li>The most important advantage of the object-oriented style is that it fits our mental chunking more accurately</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%2017%20Classes%20and%20Objects/Chapter%2017%20Runestone/#173-objects-revisited","title":"17.3 Objects Revisited","text":"<ul> <li>In Python, every value is actually an object.<ul> <li>Whether it be a turtle, a list, or even an integer, they are all objects.</li> </ul> </li> <li>An object has a state and a collection of methods (basically a function within an object/class) that it can perform.</li> <li>The state of an object represents those things that the object knows about itself.</li> <li>With turtle objects, each turtle has a state consisting of the turtle\u2019s position, its color, its heading, etc.</li> <li>Each turtle also has the ability to go forward, backward, or turn right or left.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.2%20Turtle%20Program/","title":"4.2 Turtle Program","text":"<ul> <li>turtle: python module that creates a data object called a turtle that can be used to draw pictures</li> <li>You can tell your turtle to do simple commands such as go forward and turn right.</li> <li>As the turtle moves around, if its tail is down touching the ground, it will draw a line (leave a trail behind) as it moves.</li> <li>If you tell your turtle to lift up its tail it can still move around but will not leave a trail.</li> <li>The program as shown will only draw the first two sides of the rectangle. After line 4 you will have a straight line going from the center of the drawing canvas towards the right. After line 6, you will have a canvas with a turtle and a half drawn rectangle. Press the run button to try it and see.</li> </ul> <pre><code>import turtle # allows us to use the turtles library\nwn = turtle.Screen() # creates a graphics window\nalex = turtle.Turtle() # create a turtle named alex\nalex.forward(150) # tell alex to move forward by 150 units\nalex.left(90) # turn by 90 degrees\nalex.forward(75) # complete the second side of a rectangle\n</code></pre> <ul> <li>The turtle module brings the turtle type and screen type.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.2%20Turtle%20Program/#attributes","title":"Attributes","text":"<ul> <li>Objects can have attributes, similar to editing HTML elements to add color or change size</li> </ul> <pre><code>import turtle\nwn = turtle.Screen()\nwn.bgcolor(\"lightgreen\") # set the window background color\ntess = turtle.Turtle()\ntess.color(\"blue\") # make tess blue\ntess.pensize(3) # set the width of her pen\ntess.forward(50)\ntess.left(120)\ntess.forward(50)\nwn.exitonclick() # wait for a user click on the canvas\n</code></pre> <ul> <li>When we invoke its <code>exitonclick</code> method, the program pauses execution and waits for the user to click the mouse somewhere in the window.</li> <li>When this click event occurs, the response is to close the turtle window and exit (stop execution of) the Python program.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.4%204.5%20for%20Loops/","title":"4.4/5 for Loops","text":"<ul> <li>idea of repeating same code over again: iteration</li> <li>The <code>for</code> statement allows is to write programs that implement iteration</li> </ul> <pre><code>for name in [\"Joe\", \"Amy\", \"Brad\", \"Angelina\", \"Zuki\", \"Thandi\", \"Paris\"]:\n    print(\"Hi\", name, \"Please come to my party on Saturday!\")\n        #prints a separate statement with each name in list\n</code></pre> <ul> <li>name in this <code>for</code> statement is called the loop variable</li> <li>Line 2  is the loop body. The loop body is always indented. The indentation determines exactly what statements are \u201cin the loop\u201d.  The loop body is performed one time for each name in the list.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.4%204.5%20for%20Loops/#flow-of-execution-of-the-for-loop","title":"Flow of execution of the for Loop","text":"<ul> <li>control flow, or the flow of execution<ul> <li>interpreter always keeps track of which statement is about to be executed</li> </ul> </li> <li>Control flow until now has been strictly top to bottom, one statement at a time: sequential</li> <li><code>for</code> statement flowchart</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.6%20Iteration%20Simplifies%20our%20Turtle%20Program/","title":"4.6 Iteration Simplifies our Turtle Program","text":"<ul> <li>To draw a square we\u2019d like to do the same thing four times \u2014 move the turtle forward some distance and turn 90 degrees.</li> </ul> <pre><code>import turtle            # set up alex\nwn = turtle.Screen()\nalex = turtle.Turtle()\n\nfor i in [0, 1, 2, 3]:      # repeat four times\n    alex.forward(50)\n    alex.left(90)\n\nwn.exitonclick()\n</code></pre> <p>The values [0,1,2,3] were provided to make the loop body execute 4 times. We could have used any four values. For example, consider the following program.</p> <pre><code>import turtle            # set up alex\nwn = turtle.Screen()\nalex = turtle.Turtle()\n\nfor aColor in [\"yellow\", \"red\", \"purple\", \"blue\"]:      # repeat four times\n    alex.forward(50)\n    alex.left(90)\n\nwn.exitonclick()\n</code></pre> <ul> <li>Since there are four items in the list, the iteration will still occur four times.  <code>aColor</code>will take on each color in the list.</li> <li>We can even take this one step further and use the value of <code>aColor</code>as part of the computation</li> </ul> <pre><code>import turtle            # set up alex\nwn = turtle.Screen()\nalex = turtle.Turtle()\n\nfor aColor in [\"yellow\", \"red\", \"purple\", \"blue\"]:\n   alex.color(aColor)\n   alex.forward(50)\n   alex.left(90)\n\nwn.exitonclick()\n</code></pre> <ul> <li>In this case, the value of <code>aColor</code>is used to change the color attribute of <code>alex</code><ul> <li>Each iteration causes <code>aColor</code>to change to the next value in the list.</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.7%20The%20range%20Function/","title":"4.7 The range Function","text":"<ul> <li>When called with one parameter, the sequence provided by <code>range</code>always starts with 0</li> <li>If you ask for <code>range(4)</code>, then you will get 4 values starting with 0<ul> <li>0, 1, 2, and finally 3</li> <li>4 is not included since we started with 0</li> </ul> </li> </ul> <pre><code>for i in range(4):\n    # Executes the body with i = 0, then 1, then 2, then 3\nfor x in range(10):\n    # sets x to each of ... [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <pre><code>for i in range(4):\n    alex.forward(50)\n    alex.left(90)\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.7%20The%20range%20Function/#two-parameter-range","title":"Two parameter Range","text":"<ul> <li>The evaluation of <code>range(1,5)</code> produces the desired sequence of 1-4</li> <li>we interpret the parameters of the range function to mean <code>range(start,beyondLast)</code><ul> <li>beyondLast means an index past the last index we want: 4+1</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.7%20The%20range%20Function/#three-parameter-ranges","title":"Three Parameter Ranges","text":"<ul> <li>Third parameter: step</li> <li>Tells the range what to count by</li> <li>So if we wanted the first 10 even numbers we would use <code>range(0,19,2)</code></li> <li>The most general form of the range is <code>range(start, beyondLast, step)</code></li> <li>You can also create a sequence of numbers that starts big and gets smaller by using a negative value for the step parameter.</li> </ul> <pre><code>print(list(range(0, 19, 2)))\nprint(list(range(0, 20, 2)))\nprint(list(range(10, 0, -1)))\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.8%20A%20Few%20More%20turtle%20Methods%20and%20Observations/","title":"4.8 A Few More turtle Methods and Observations","text":""},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.8%20A%20Few%20More%20turtle%20Methods%20and%20Observations/#turtle-methods-can-use-negative-angles-or-distances","title":"Turtle methods can use negative angles or distances.","text":"<ul> <li><code>tess.forward(-100)</code>will move tess backwards</li> <li><code>tess.left(-30)</code>turns her to the right</li> <li>because there are 360 degrees in a circle, turning 30 to the left will leave you facing in the same direction as turning 330 to the right<ul> <li>The on-screen animation will differ, though \u2014 you will be able to tell if tess is turning clockwise or counter-clockwise</li> <li>This suggests that we don\u2019t need both a left and a right turn method</li> </ul> </li> <li>There is also a backward method: <code>alex.backward(100)</code></li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.8%20A%20Few%20More%20turtle%20Methods%20and%20Observations/#a-turtles-pen-can-be-picked-up-or-put-down","title":"A turtle\u2019s pen can be picked up or put down","text":"<ul> <li>This allows us to move a turtle to a different place without drawing a line</li> <li>The methods are <code>up</code> and <code>down</code><ul> <li><code>penup</code> and <code>pendown</code> do the same thing.</li> </ul> </li> <li>Every turtle can have its own shape. The ones available \u201cout of the box\u201d are<ul> <li><code>arrow</code></li> <li><code>blank</code></li> <li><code>circle</code></li> <li><code>classic</code></li> <li><code>square</code></li> <li><code>triangle</code></li> <li><code>turtle</code></li> </ul> </li> </ul> <pre><code>alex.shape(\"turtle\")\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/4.8%20A%20Few%20More%20turtle%20Methods%20and%20Observations/#you-can-speed-up-or-slow-down-the-turtles-animation-speed","title":"You can speed up or slow down the turtle\u2019s animation speed","text":"<ul> <li>Speed settings can be set between 1 (slowest) to 10 (fastest)</li> <li>0 turns off animation and immediately draws shape</li> </ul> <pre><code>alex.speed(10)\n</code></pre> <pre><code>import turtle\nwn = turtle.Screen()\nwn.bgcolor(\"lightgreen\")\ntess = turtle.Turtle()\ntess.color(\"blue\")\ntess.shape(\"turtle\")\n\nprint(list(range(5, 60, 2)))\ntess.up()                     # this is new\nfor size in range(5, 60, 2):    # start with size = 5 and grow by 2\n    tess.stamp()                # leave an impression on the canvas\n    tess.forward(size)          # move tess along\n    tess.right(24)              # and turn her\n\nwn.exitonclick()\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%204%20Turtle%20Graphics/Chapter%204%20RuneStone/","title":"Chapter 4: Turtle Graphics","text":"<ul> <li>4.2 Turtle Program</li> <li>4.4/5 for Loops</li> <li>4.6 Iteration Simplifies our Turtle Program</li> <li>4.7 The range Function</li> <li>4.8 A Few More turtle Methods and Observations</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.3%20Math%20Module/","title":"5.3 Math Module","text":"<ul> <li>The <code>math</code>module contains the kinds of mathematical functions you would typically find on your calculator and some mathematical constants like pi and e</li> <li>As we noted above, when we <code>import math</code>, we create a reference to a module object that contains these elements.</li> <li>If you want more information, you can check out the Math Module Python Documentation.</li> <li>Mathematical functions do not need to be constructed. They simply perform a task. They are all housed together in a module called math.</li> </ul> <pre><code>import math\n\nprint(math.pi)\nprint(math.e)\n\nprint(math.sqrt(2.0))\n\nprint(math.sin(math.radians(90)))   # sin of 90 degrees\n</code></pre> <ul> <li>Contains number of math stuff: trig, log, etc</li> <li>Function: list of statements that can be executed simply by referring to the function's name.</li> <li>The process of invoking a function is referred to as a function call.</li> <li>The item passed to a function is referred to as an argument.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.4%20Random%20Module/","title":"5.4 Random Module","text":"<p>We often want to use random numbers in programs. Here are a few typical uses:</p> <ul> <li>To play a game of chance where the computer needs to throw some dice, pick a number, or flip a coin,</li> <li>To shuffle a deck of playing cards randomly,</li> <li>To randomly allow a new enemy spaceship to appear and shoot at you,</li> <li>To simulate possible rainfall when we make a computerized model for estimating the environmental impact of building a dam,</li> <li>For encrypting your banking session on the Internet.</li> </ul> <pre><code>import random\n\nprob = random.random()\nprint(prob)\n\ndiceThrow = random.randrange(1, 7)       # return an int, one of 1,2,3,4,5,6\nprint(diceThrow)\n</code></pre> <ul> <li>The <code>randrange</code>function generates an integer between its lower and upper argument, using the same semantics as <code>range</code><ul> <li>So the lower bound is included, but the upper bound is excluded.</li> </ul> </li> <li>The <code>random.random()</code>function returns a floating point number in the range [0.0, 1.0)<ul> <li>The square bracket means \u201cclosed interval on the left\u201d and the round parenthesis means \u201copen interval on the right\u201d<ul> <li>0.0 is possible, but all returned numbers will be strictly less than 1.0.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.4%20Random%20Module/#example","title":"Example","text":"<ul> <li>In the case shown here, we\u2019ve converted the result of the method call to a number in the range [0.0, 5.0).</li> <li>Once more, these are uniformly distributed numbers (all numbers have equal chance</li> </ul> <pre><code>import random\n\nprob = random.random()\nresult = prob * 5\nprint(result)\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.4%20Random%20Module/#notes","title":"Notes","text":"<ul> <li>Random number generators are based on a deterministic algorithm \u2014 repeatable and predictable.</li> <li>Each time you ask for another random number, you\u2019ll get one based on the current seed attribute, and the state of the seed (which is one of the attributes of the generator) will be updated.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.5%20Creating%20Modules/","title":"5.5 Creating Modules","text":"<ul> <li>Every time you\u2019ve written a Python script you\u2019ve created a module</li> <li>A Python module is just a Python source code file.</li> </ul> <pre><code>\"\"\"\ncoffee_shop.py\nThe coffee shop module contains functions and contains variables\nimportant to implementing a coffee shop.\n\"\"\"\n\n# Set some variables\nshop_name = \"Runestone Brew House\"\ncoffee_sizes = [\"small\", \"medium\", \"large\"]\ncoffee_roasts = [\"hot chocolate\", \"light\", \"medium\", \"dark\", \"espresso\"]\n</code></pre> <ul> <li>This is a Python script named <code>coffee_shop.py</code>that contains three variables: <code>shop_name</code>,<code>coffee_sizes</code>, and <code>coffee_roasts</code>. The <code>shop_name</code>is a string, <code>coffee_sizes</code>is a list containing strings, and <code>coffee_roasts</code>is also a list containing strings.</li> <li>How can we use the <code>coffee_shop</code>module? We can import it and use it in other Python source code files.</li> </ul> <pre><code>#coffee_customer.py\nimport coffee_shop\n\n# Output the information we know from the module\nprint(\"Welcome to\", coffee_shop.shop_name)\nprint(\"Available sizes:\", coffee_shop.coffee_sizes)\nprint(\"Available roasts:\", coffee_shop.coffee_roasts)\n</code></pre> <ul> <li>The module files must be in the same directory on your computer for Python to know how to import them automatically</li> <li>We use dot notation to grab the <code>shop_name</code>, <code>coffee_sizes</code>, and <code>coffee_roasts</code>variables from the <code>coffee_shop</code>module</li> <li>Variables aren\u2019t the only thing we can place in modules though\u2026 We can put any valid Python code in them.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.5%20Creating%20Modules/#lets-improve-our-coffee-shop","title":"Let\u2019s improve our coffee shop","text":"<pre><code>\"\"\"\ncoffee_shop.py\nThe coffee shop module contains functions and contains variables\nimportant to implementing a coffee shop.\n\"\"\"\n\n# Set some variables\nshop_name = \"Runestone Brew House\"\ncoffee_sizes = [\"small\", \"medium\", \"large\"]\ncoffee_roasts = [\"hot chocolate\", \"light\", \"medium\", \"dark\", \"espresso\"]\n\ndef order_coffee(size, roast):\n\"\"\"\n    Take an order from a user\n    :param size: a string containing one of the coffee_sizes\n    :param roast: a string containing one of the coffee_roasts\n    :return: a message about the coffee order\n    \"\"\"\n    return \"Here's your {} coffee roasted {}\".format(size, roast)\n</code></pre> <ul> <li>The old file contents are present, but now there\u2019s also an <code>order_coffee</code>function that takes two arguments, <code>size</code>and <code>roast</code></li> </ul> <p>We\u2019ve got a function in our module now, let\u2019s use it.</p> <pre><code>#this is coffee_customer.py\n# Import the module with coffee_shop functionality\nimport coffee_shop\n\n# Output the information we know from the module\nprint(\"Welcome to\", coffee_shop.shop_name)\nprint(\"Available sizes:\", coffee_shop.coffee_sizes)\nprint(\"Available roasts:\", coffee_shop.coffee_roasts)\n\n# Get some inputs from the user\norder_size = input(\"What size coffee do you want? \")\norder_roast = input(\"What roast do you want? \")\n\n# Send the order to the coffee shop module\nshop_says = coffee_shop.order_coffee(order_size, order_roast)\n# Print out whatever it gave back to us\nprint(shop_says)\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.5%20Creating%20Modules/#further-expansion-of-example","title":"Further Expansion of Example","text":"<pre><code>\"\"\"\ncoffee_shop.py\nThe coffee shop module contains functions and contains variables\nimportant to implementing a coffee shop.\n\"\"\"\n\n# Set some variables\nshop_name = \"Runestone Brew House\"\ncoffee_sizes = [\"small\", \"medium\", \"large\"]\ncoffee_roasts = [\"hot chocolate\", \"light\", \"medium\", \"dark\", \"espresso\"]\n\ndef order_coffee(size, roast):\n\"\"\"\n    Take an order from a user\n    :param size: a string containing one of the coffee_sizes\n    :param roast: a string containing one of the coffee_roasts\n    :return: a message about the coffee order\n    \"\"\"\n    return \"Here's your {} coffee roasted {}\".format(size, roast)\n\ndef add_milk_please(fat_content):\n\"\"\"\n    Pretend like we're adding some milk to a coffee\n    :param fat_content: a string or integer containing the milkfat content\n    :return: a message about having added the milk\n    \"\"\"\n    return \"I've added the {}% milk\".format(fat_content)\n\ndef give_tip(tip_amount):\n\"\"\"\n    Take a tip from the user, then be happy about it\n    :param tip_amount: the tip amount\n    :return: nothing\n    \"\"\"\n    print(\"Thank you so much!  We don't make a ton of money.\")\n\n    # Not having a \"return\" statement causes our function to return None\n</code></pre> <pre><code>#coffee_customer.py\n# Import the module with coffee_shop functionality\nimport coffee_shop\n\n# Output the information we know from the module\nprint(\"Welcome to\", coffee_shop.shop_name)\nprint(\"Available sizes:\", coffee_shop.coffee_sizes)\nprint(\"Available roasts:\", coffee_shop.coffee_roasts)\n\n# Get some inputs from the user\norder_size = input(\"What size coffee do you want? \")\norder_roast = input(\"What roast do you want? \")\n\n# Send the order to the coffee shop module\nshop_says = coffee_shop.order_coffee(order_size, order_roast)\n# Print out whatever it gave back to us\nprint(shop_says)\n\n# See if the user wants to add milk\nadd_milk_response = input(\"Do you want to add milk (y/n)? \")\n# Convert the response to lowercase, then check for a \"yes\" answer\nif \"y\" in add_milk_response.lower():\n    milk_fat = input(\"What percent milk do you want added? \")\n    shop_says = coffee_shop.add_milk_please(milk_fat)\n    # Print out whatever it gave back to us\n    print(shop_says)\n\n# They better give a tip...\nprint(\"THAT'S GOOD COFFEE!  Very good.  Your brain is working again.\")\nprint(\"You better give a tip.\")\ntip_amount = input(\"Tip amount? \")\ncoffee_shop.give_tip(tip_amount)\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.5%20Creating%20Modules/#module-comments","title":"Module Comments","text":"<ul> <li>It is important to include header comments in your module that explain what the module does.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/5.5%20Creating%20Modules/#function-comments","title":"Function Comments","text":"<ul> <li>Functions are the next chapter, but the comments used here demonstrate a common Python documentation style.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/Chapter%205%20RuneStone/","title":"Chapter 5: Python Modules","text":"<ul> <li>5.3 Math Module</li> <li>5.4 Random Module</li> <li>5.5 Creating Modules</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/Chapter%205%20RuneStone/#51-modules-and-getting-help","title":"5.1 Modules and Getting Help","text":"<ul> <li>A module is a file containing python definitions and statements intended for use in other python programs</li> <li>Many python modules come with python as part of the standard library</li> <li>The Python Documentation site for Python version 3 is an extremely useful reference for all aspects of Python</li> <li>The site contains a listing of all the standard modules that are available with Python (see Global Module Index)</li> <li>You will also see that there is a Language Reference and a Tutorial (mostly aimed at people who are already familiar with another programming language), as well as installation instructions, how-tos, and frequently asked questions</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%205%20Python%20Modules/Chapter%205%20RuneStone/#52-more-about-using-modules","title":"5.2 More About Using Modules","text":"<ul> <li>One of the most important things to realize about modules is the fact that they are data objects, just like any other data in Python</li> <li>The first thing we need to do when we wish to use a module is perform an <code>import</code><ul> <li>the statement <code>import turtle</code> creates a new name, <code>turtle</code>, and makes it refer to a module object</li> </ul> </li> <li>In order to use something contained in a module, we use the dot  notation, providing the module name and the specific item joined together with a \u201cdot\u201d.<ul> <li>to use the <code>Turtle</code>class, we say <code>turtle.Turtle</code></li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.1%20Functions/","title":"6.1 Functions","text":"<ul> <li>In Python, a function is a named sequence of statements that belong together</li> <li>Purpose: organize program into chunks</li> </ul> <p>Syntax:</p> <pre><code>def name( parameters ):\n    statements\n</code></pre> <ul> <li>In a function definition, the keyword in the header is <code>def</code>, which is followed by the name of the function and some parameters enclosed in parentheses</li> <li>the parameter list is more specifically known as the formal parameters</li> <li>When you use a function, you provide values to the formal parameters.</li> <li>Even if a function call needs no arguments, the parentheses <code>( )</code>after the function name are required. This can lead to a difficult bug:  A function name without the parenthesis is a legal expression referring to the function; for example,<code>print</code>and <code>alex.penup</code>, but they do not call the associated functions.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.1%20Functions/#docstrings","title":"docstrings","text":"<ul> <li>If the first thing after the function header is a string (some tools insist that it must be a triple quoted string), it is called a docstring and gets special treatment in Python and in some of the programming tools.</li> <li>Another way to retrieve this information is to use the interactive interpreter, and enter the expression <code>&lt;function_name&gt;.__doc__</code>, which will retrieve the docstring for the function.<ul> <li>So the string you write as documentation at the start of a function is retrievable by python tools at runtime.</li> </ul> </li> <li>By convention, Python programmers use docstrings for the key documentation of their functions.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.1%20Functions/#function-call","title":"Function Call","text":"<ul> <li>Defining a new function does not make the function run. To do that we need a function call. This is also known as a function invocation</li> <li>Function calls contain the name of the function to be executed followed by a list of values in parentheses, called arguments, which are assigned to the parameters in the function definition.</li> </ul> <pre><code>import turtle\n\n# this is the function that will be called\ndef drawSquare(t, sz):\n\"\"\"Make turtle t draw a square of with side sz.\"\"\"\n\n    for i in range(4):\n        t.forward(sz)\n        t.left(90)\n\nwn = turtle.Screen()          # Set up the window and its attributes\nwn.bgcolor(\"lightgreen\")\n\nalex = turtle.Turtle()        # create alex\ndrawSquare(alex, 50)          # Call the function to draw the square\n\nalex.penup()\nalex.goto(100,100)\nalex.pendown()\n\ndrawSquare(alex,75)           # Call the function again to draw another square\n\nwn.exitonclick()\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/","title":"6.2/3 Function Return Values &amp; Unit Testing","text":"<ul> <li>Most functions require arguments, values that control how the function does its job</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/#fruitful-functions","title":"Fruitful Functions","text":"<ul> <li>Functions that return values</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/#non-fruitful-functions","title":"Non-Fruitful Functions","text":"<ul> <li>Function that doesn\u2019t return value</li> <li>Known as a procedure in other programming languages</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/#63-unit-testing","title":"6.3 Unit Testing","text":"<ul> <li>a test asserts something about the state of the program at a particular point in its execution.</li> <li>unit test is an automatic procedure used to validate that individual units of code are working properly</li> <li>One way to implement unit tests in Python is with <code>assert</code><ul> <li>Following the word assert there will be a python expression.</li> <li>If that expression evaluates to the Boolean <code>False</code>, then the interpreter will raise a runtime error.</li> <li>If the expression evaluates to <code>True</code>, then nothing happens and the execution goes on to the next line of code.</li> </ul> </li> </ul> <p>Ex:</p> <pre><code>assert type(9//5) == int\nassert type(9.0//5) == int\n</code></pre> <ul> <li>First line will pass, second line will fail, cause it is a float not an int</li> <li>We can add <code>assert</code>statements that will cause an error to be flagged sooner rather than later, which might make it a lot easier to debug</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/#assert-with-for-loops","title":"<code>assert</code> with <code>for</code> loops","text":"<p>Ex:</p> <pre><code>lst = ['a', 'b', 'c']\nfirst_type = type(lst[0])\nfor item in lst:\n    assert type(item) == first_type\n\nlst2 = ['a', 'b', 'c', 17]\nfirst_type = type(lst2[0])\nfor item in lst2:\n    assert type(item) == first_type\n</code></pre> <ul> <li>1st assert passes, but 2nd assert fails because there is a different type in the list</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/#return-value-test","title":"Return Value Test","text":"<ul> <li>Testing whether a function returns the correct value is the easiest test case to define</li> </ul> <p>Ex:</p> <pre><code>def square(x):\n#raise x to the second power\n    return x*x\nprint('testing square function')\nassert square(3) == 9\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.2%206.3%20Function%20Return%20Values%20%26%20Unit%20Testing/#unittest-module","title":"unittest Module","text":"<ul> <li>In larger projects, other testing harnesses are used instead of <code>assert</code>, such as the python<code>unittest</code>module.<ul> <li>Those provide some output summarizing tests that have passed as well as those that failed.</li> </ul> </li> <li>Have a second .py file that will be a module<ul> <li>named test_whatever.py</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.4%206.5%20Variables%20and%20Parameters%20are%20Local/","title":"6.4/5 Variables and Parameters are Local","text":"<ul> <li>An assignment statement in a function creates a local variable</li> <li>It is called local because this variable only exists inside the function and you cannot use it outside.</li> <li>it is legal for a function to access a global variable. However, this is considered bad form by nearly all programmers and should be avoided.</li> <li>Local Variables<ul> <li>Python looks at the variables that are defined as local variables in the function. We call this the local scope</li> </ul> </li> <li>Global Variables<ul> <li>If the variable name is not found in the local scope, then Python looks at the global variables, or global scope</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.4%206.5%20Variables%20and%20Parameters%20are%20Local/#65-the-accumulator-pattern","title":"6.5 The Accumulator Pattern","text":"<ul> <li>This pattern of iterating the updating of a variable is commonly referred to as the accumulator pattern</li> <li>We refer to the variable as the accumulator</li> <li>Remember that the key to making it work successfully is to be sure to initialize the variable before you start the iteration.</li> <li>Once inside the iteration, it is required that you update the accumulator.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.4%206.5%20Variables%20and%20Parameters%20are%20Local/#main-use-case","title":"Main use case","text":"<pre><code>initialize the accumulator variable\nrepeat:\n    modify the accumulator variable\n\n# when the loop terminates the accumulator has the correct value\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/6.8%20Using%20a%20main%20Function/","title":"6.8 Using a main Function","text":"<ul> <li>In many programming languages (e.g. Java and C++), it is not possible to simply have statements sitting alone like this at the bottom of the program.</li> <li>They are required to be part of a special function that is automatically invoked by the operating system when the program is executed.</li> <li>This special function is called main</li> </ul> <p>Before:</p> <pre><code>import turtle\n\ndef drawSquare(t, sz):\n\"\"\"Make turtle t draw a square of with side sz.\"\"\"\n\n    for i in range(4):\n        t.forward(sz)\n        t.left(90)\n\nwn = turtle.Screen()          # Set up the window and its attributes\nwn.bgcolor(\"lightgreen\")\n\nalex = turtle.Turtle()        # create alex\ndrawSquare(alex, 50)          # Call the function to draw the square\n\nwn.exitonclick()\n</code></pre> <p>After:</p> <pre><code>import turtle\n\ndef drawSquare(t, sz):\n\"\"\"Make turtle t draw a square of with side sz.\"\"\"\n\n    for i in range(4):\n        t.forward(sz)\n        t.left(90)\n\ndef main():                      # Define the main function\n    wn = turtle.Screen()         # Set up the window and its attributes\n    wn.bgcolor(\"lightgreen\")\n\n    alex = turtle.Turtle()       # create alex\n    drawSquare(alex, 50)         # Call the function to draw the square\n\n    wn.exitonclick()\n\nmain()                           # Invoke the main function\n</code></pre> <p>Note</p> <ul> <li>In Python there is nothing special about the name <code>main</code>.  We could have called this function anything we wanted.  We chose <code>main</code> just to be consistent with some of the other languages.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/Chapter%206%20RuneStone/","title":"Chapter 6: Functions","text":"<ul> <li>6.1 Functions</li> <li>6.2 6.3 Function Return Values &amp; Unit Testing</li> <li>6.4 6.5 Variables and Parameters are Local</li> <li>6.8 Using a main Function</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%206%20Functions/Chapter%206%20RuneStone/#66-functions-calling-other-functions","title":"6.6 Functions calling other Functions","text":"<pre><code>1   def square(x):\n2       y = x * x\n3       return y\n4   \n5   def sum_of_squares(x, y, z):\n6       a = square(x)\n7       b = square(y)\n8       c = square(z)\n9   \n10      return a + b + c\n11  \n12  a = -5\n13  b = 2\n14  c = 10\n15  result = sum_of_squares(a, b, c)\n16  print(result)\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.1%20Boolean%20Values%20and%20Boolean%20Expressions/","title":"7.1 Boolean Values and Boolean Expressions","text":"<ul> <li>The Python type for storing true and false values is called <code>bool</code></li> <li>George Boole created Boolean Algebra, which is the basis of all modern computer arithmetic.</li> <li>There are only two boolean values<ul> <li>True</li> <li>False</li> </ul> </li> <li>Capitalization is important, since <code>true</code>and <code>false</code>are not boolean values<ul> <li>(remember Python is case sensitive).</li> </ul> </li> <li>Boolean values are not strings!</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.1%20Boolean%20Values%20and%20Boolean%20Expressions/#boolean-expression","title":"boolean expression","text":"<ul> <li>A boolean expression is an expression that evaluates to a boolean value.</li> <li>The equality operator, <code>==</code>, compares two values<ul> <li>produces a boolean value (True or False) related to whether the two values are equal to one another.</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.1%20Boolean%20Values%20and%20Boolean%20Expressions/#quick-note","title":"Quick Note","text":"<ul> <li>The <code>==</code> operator is one of six common comparison operators; the others are:</li> </ul> <pre><code>x != y               # x is not equal to y\nx &gt; y                # x is greater than y\nx &lt; y                # x is less than y\nx &gt;= y               # x is greater than or equal to y\nx &lt;= y               # x is less than or equal to y\n</code></pre> <ul> <li>Remember that <code>=</code>is an assignment operator and <code>==</code>is a comparison operator</li> <li>there is no such thing as <code>=&lt;</code>or <code>=&gt;</code></li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/","title":"7.2 Logical Operators","text":"<ul> <li>There are three logical operators: <code>and</code>, <code>or</code>, and <code>not</code></li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#and","title":"<code>and</code>","text":"<ul> <li>For example, <code>x &gt; 0 and x &lt; 10</code>is true only if <code>x</code>is greater than 0 and at the same time, x is less than 10</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#or","title":"<code>or</code>","text":"<ul> <li><code>n % 2 == 0 or n % 3 == 0</code>is true if either of the conditions is true</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#not","title":"<code>not</code>","text":"<ul> <li>Finally, the <code>not</code>operator negates a boolean expression, so <code>not\u00a0 x &gt; y</code>is true if <code>x &gt; y</code>is false</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#truth-tables","title":"Truth Tables","text":"<ul> <li>To show how logical operators work</li> </ul> a b a and b a or b not a not b T T T T F F T F F T F T F T F T T F F F F F T T"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#python-quick-note","title":"Python Quick Note:","text":"<ul> <li>CORRECT:<ul> <li><code>number == 5 or number == 6 or number == 7</code></li> </ul> </li> <li>NOT CORRECT:<ul> <li><code>number == 5 or 6 or 7</code></li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#721-logical-opposites","title":"7.2.1 Logical Opposites","text":"Operator Definition Logical Opposites == Equals to != != Not Equals to == &lt; Less than &gt;= &lt;= Less Than or Equal to &gt; &gt; Greater Than &lt;= &gt;= Greater Than or Equal to &lt; - Understanding these logical opposites allows us to sometimes get rid of <code>not</code>operators - <code>not</code>operators are often quite difficult to read in computer code - Our intentions will usually be clearer if we can eliminate them. <p>Harder to understand:</p> <pre><code>if not (age &gt;= 17):\n   print(\"Hey, you're too young to get a driving licence!\")\n</code></pre> <p>Easier to understand</p> <pre><code>if age &lt; 17:\n   print(\"Hey, you're too young to get a driving licence!\")\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#de-morgans-laws","title":"De Morgan\u2019s Laws","text":"<ul> <li>Two powerful simplification laws</li> </ul> <pre><code>not (x and y)  ==  (not x) or (not y)\nnot (x or y)   ==  (not x) and (not y)\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.2%20Logical%20Operators/#examples","title":"Examples","text":"<p>Harder to Understand</p> <pre><code>if not ((phone_charge &gt;= 0.50) and (phone_storage &gt;= .15)):\n   print(\"You cannot restart your phone. Battery too low or not enough free space.\")\nelse:\n   print(\"Updating now...Several restarts may be required.\")\n</code></pre> <p>Easier to Understand</p> <pre><code>if (phone_charge &lt; 0.50) or (phone_storage &lt; .15):\n   print(\"You cannot restart your phone. Battery too low or not enough free space.\")\nelse:\n   print(\"Updating now...Several restarts may be required.\")\n</code></pre> <p>Easiest Understanding/Implementation</p> <pre><code>if (phone_charge &gt;= 0.50) and (phone_storage &gt;= .15):\n   print(\"Updating now...Several restarts may be required.\")\nelse:\n   print(\"You cannot restart your phone. Battery too low or not enough free space.\")\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.3%20Precedence%20of%20Operators/","title":"7.3 Precedence of Operators","text":""},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.3%20Precedence%20of%20Operators/#order-of-operations","title":"Order Of Operations","text":""},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.3%20Precedence%20of%20Operators/#order-precedence-table","title":"Order Precedence Table","text":"Level of Precedence Operator Description 10 (Highest, trumps all) (expressions...), [expressions...], {key: value...}, {expressions...} Binding or tuple display, list display, dictionary display, set display 9 x[index], x[index:index], x(arguments...), x.attribute Subscription, slicing, call, attribute reference 8 ** Exponentiation (groups right to left) 7 -x Negation 6 *, /, //, % Multiplication, real and integer division, remainder 5 +, - Addition and subtraction 4 in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, !=, == Comparisons, including membership tests and identity tests 3 not x Boolean NOT 2 and Boolean AND 1 (Lowest, trumps none) or Boolean OR"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.4%207.5%207.6%207.7%20Conditional%20Execution%20Binary%20Selection/","title":"7.4/5/6/7 Conditional Execution: Binary Selection","text":"<ul> <li>In order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.4%207.5%207.6%207.7%20Conditional%20Execution%20Binary%20Selection/#selection-statements-conditional-statements","title":"Selection Statements (Conditional Statements)","text":""},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.4%207.5%207.6%207.7%20Conditional%20Execution%20Binary%20Selection/#if-statement","title":"<code>if</code> statement","text":"<p>Structure of an <code>if</code> statement</p> <pre><code>if BOOLEAN EXPRESSION:\n    STATEMENTS_1        # executed if condition evaluates to True\nelse:\n    STATEMENTS_2        # executed if condition evaluates to False\n</code></pre> <p>Example</p> <pre><code>x = 15\n\nif x % 2 == 0:\n    print(x, \"is even\")\nelse:\n    print(x, \"is odd\")\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.4%207.5%207.6%207.7%20Conditional%20Execution%20Binary%20Selection/#unary-selection","title":"Unary Selection","text":"<ul> <li>The <code>else</code>clause is omitted entirely</li> <li>When the condition evaluates to <code>True</code>, the statements are executed.</li> <li>Otherwise the flow of execution continues to the statement after the body of the <code>if</code></li> <li>Example:</li> </ul> <pre><code>x = 10\nif x &lt; 0:\n    print(\"The negative number \",  x, \" is not valid here.\")\nprint(\"This is always printed\")\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.4%207.5%207.6%207.7%20Conditional%20Execution%20Binary%20Selection/#76-nested-conditionals","title":"7.6 Nested Conditionals","text":"<ul> <li>One conditional can be nested within another.</li> </ul> <pre><code>if x &lt; y:\n    print(\"x is less than y\")\nelse:\n    if x &gt; y:\n        print(\"x is greater than y\")\n    else:\n        print(\"x and y must be equal\")\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.4%207.5%207.6%207.7%20Conditional%20Execution%20Binary%20Selection/#77-chained-conditionals","title":"7.7 Chained Conditionals","text":"<pre><code>if x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x and y must be equal\")\n</code></pre> <ul> <li>Exactly one branch will be executed.</li> <li><code>elif</code>is an abbreviation of <code>else if</code></li> <li>There is no limit of the number of <code>elif</code>statements</li> <li>only a single (and optional) final <code>else</code>statement is allowed and it must be the last branch in the statement.</li> <li>Each condition is checked in order</li> <li>If the first is false, the next is checked, and so on, until one is true, branch executes, then conditional is over.</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.8%20Boolean%20Functions/","title":"7.8 Boolean Functions","text":""},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/7.8%20Boolean%20Functions/#example-of-outputting-boolean-values","title":"Example of Outputting Boolean Values","text":"<pre><code>def isDivisible(x, y):\n    if x % y == 0:\n        result = True\n    else:\n        result = False\n\n    return result\n\nprint(isDivisible(10, 5))\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%207%20Selection/Chapter%207%20RuneStone/","title":"Chapter 7: Selection","text":"<ul> <li>7.1 Boolean Values and Boolean Expressions</li> <li>7.2 Logical Operators</li> <li>7.3 Precedence of Operators</li> <li>7.4 7.5 7.6 7.7 Conditional Execution Binary Selection</li> <li>7.8 Boolean Functions</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.10%20Transversal%20and%20the%20for%20Loop%20By%20Item/","title":"9.10 Transversal and the for Loop: By Item","text":""},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.10%20Transversal%20and%20the%20for%20Loop%20By%20Item/#transversal-loops","title":"Transversal loops","text":"<ul> <li>Often we start at the beginning, select each character in turn, do something to it, and continue until the end. This pattern of processing is called a traversal</li> </ul> <pre><code>for aname in [\"Joe\", \"Amy\", \"Brad\", \"Angelina\", \"Zuki\", \"Thandi\", \"Paris\"]:\n    invitation = \"Hi \" + aname + \".  Please come to my party on Saturday!\"\n    print(invitation)\n\n''' Output\nHi Joe.  Please come to my party on Saturday!\nHi Amy.  Please come to my party on Saturday!\nHi Brad.  Please come to my party on Saturday!\nHi Angelina.  Please come to my party on Saturday!\nHi Zuki.  Please come to my party on Saturday!\nHi Thandi.  Please come to my party on Saturday!\nHi Paris.  Please come to my party on Saturday!\n'''\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.3%20Operations%20on%20Strings/","title":"9.3 Operations on Strings","text":"<ul> <li>In general, you cannot perform mathematical operations on strings, even if the strings look like numbers.</li> <li>You can use the addition (+) operator, but it serves as a concatenation (smashes 2 strings together), not addition</li> </ul> <pre><code>fruit = \"banana\"\nbakedGood = \" nut bread\"\nprint(fruit + bakedGood)\n\n# Output: banana nut bread\n</code></pre> <ul> <li>The <code>*</code>operator also works on strings.  It performs repetition. For example,<code>'Fun'*3</code> is <code>'FunFunFun'</code></li> </ul> <pre><code>print(\"Go\" * 6)\n\nname = \"Packers\"\nprint(name * 3)\n\nprint(name + \"Go\" * 3)\n\nprint((name + \"Go\") * 3)\n\n'''Output: \nGoGoGoGoGoGo\nPackersPackersPackers\nPackersGoGoGo\nPackersGoPackersGoPackersGo\n'''\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.4%20Index%20Operator/","title":"9.4 Index Operator: Working with the Characters of a String","text":"<ul> <li>Indexing operator (Python uses square brackets to enclose the index) selects a single character from a string.</li> </ul> <ul> <li>This can be used to select specific characters in a string</li> </ul> <pre><code>school = \"Luther College\"\nm = school[2]\nprint(m)\n\nlastchar = school[-1]\nprint(lastchar)\n\n'''Output:\nt\ne\n'''\n</code></pre> <ul> <li>The expression <code>school[2]</code>selects the character at index 2 from <code>school</code>, and creates a new string containing just this one character. The variable <code>m</code>refers to the result.</li> <li>Remember that computer scientists often start counting from zero</li> <li>The expression in brackets is called an index</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.5%20String%20Methods%20%26%20String%20Format/","title":"9.5 String Methods &amp; String Format","text":"<ul> <li>\u201cdot notation\u201d is the way we connect the name of an object to the name of a method it can perform.</li> </ul> <pre><code>ss = \"Hello, World\"\nprint(ss.upper())\n\ntt = ss.lower()\nprint(tt)\n\n'''Output:\nHELLO, WORLD\nhello, world\n'''\n</code></pre> <ul> <li>In addition to <code>upper</code>and <code>lower</code>, the following table provides a summary of some other useful string methods.</li> </ul> <pre><code>ss = \"    Hello, World    \"\n\nels = ss.count(\"l\")\nprint(els)\n\nprint(\"***\" + ss.strip() + \"***\")\nprint(\"***\" + ss.lstrip() + \"***\")\nprint(\"***\" + ss.rstrip() + \"***\")\n\nnews = ss.replace(\"o\", \"***\")\nprint(news)\n\n'''Output:\n3\n***Hello, World***\n***Hello, World    ***\n***    Hello, World***\n    Hell***, W***rld\n'''\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.5%20String%20Methods%20%26%20String%20Format/#zachs-notes","title":"Zach\u2019s Notes","text":"<ul> <li>What I used to get all strings the same length (this was useful for adding numbers at the end and keeping them in line (SEE UNIT 5 ASSIGNMENT table_3 function for more info)</li> </ul> <pre><code>if len(m) &lt;= 26:\n    m += ' '\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.5%20String%20Methods%20%26%20String%20Format/#951-string-format-method","title":"9.5.1 String Format Method","text":""},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.5%20String%20Methods%20%26%20String%20Format/#what-zach-uses","title":"What Zach Uses","text":"<ul> <li>Abbreviated <code>format</code> in front of string and variable referenced in curly brackets.</li> </ul> <pre><code>a = 'world'\nprint(f\"hello {a}\")\n</code></pre> <ul> <li>See Python 3's f-Strings: An Improved String Formatting Syntax (Guide)</li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.5%20String%20Methods%20%26%20String%20Format/#textbook","title":"Textbook","text":"<ul> <li>The string method <code>format</code>,  makes substitutions into places in a string enclosed in braces.</li> </ul> <pre><code>person = input('Your name: ')\ngreeting = 'Hello {}!'.format(person)\nprint(greeting)\n</code></pre> <ul> <li>There can be multiple substitutions, with data of any type. Next we use floats. Try original price $2.50 with a 7% discount:</li> </ul> <pre><code>origPrice = float(input('Enter the original price: $'))\ndiscount = float(input('Enter discount percentage: '))\nnewPrice = (1 - discount/100)*origPrice\ncalculation = '${} discounted by {}% is ${}.'.format(origPrice, discount, newPrice)\nprint(calculation)\n\n'''Output:\n$5.10 discounted by 6.1% is $4.7889.\n'''\n</code></pre> <ul> <li>The parameters are inserted into the braces in order.</li> <li>Format strings can give further information inside the braces showing how to specially format data.</li> <li>For two decimal places, put <code>:.2f</code>inside the braces for the monetary values:</li> </ul> <pre><code>origPrice = float(input('Enter the original price: $'))\ndiscount = float(input('Enter discount percentage: '))\nnewPrice = (1 - discount/100)*origPrice\ncalculation = '${:.2f} discounted by {}% is ${:.2f}.'.format(origPrice, discount, newPrice)\nprint(calculation)\n\n'''Output\n$5.10 discounted by 6.1% is $4.79.\n'''\n</code></pre> <ul> <li>The 2 in the format modifier can be replaced by another integer to round to that specified number of digits.</li> </ul> <p>Note: If you need curly braces in the string itself, use double {{</p> <pre><code>letter = \"\"\"\nDear {0} {2}.\n{0}, I have an interesting money-making proposition for you!\n If you deposit $10 million into my bank account, I can\n double your money ...\n\"\"\"\n\nprint(letter.format(\"Paris\", \"Whitney\", \"Hilton\"))\nprint(letter.format(\"Bill\", \"Henry\", \"Gates\"))\n\n'''Output:\nDear Paris Hilton.\n Paris, I have an interesting money-making proposition for you!\n If you deposit $10 million into my bank account, I can\n double your money ...\n\nDear Bill Gates.\n Bill, I have an interesting money-making proposition for you!\n If you deposit $10 million into my bank account, I can\n double your money ...\n'''\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.7%209.8%20Slice%20Operator%20String%20Comparison/","title":"9.7/8 Slice Operator/String Comparison","text":"<ul> <li>A substring of a string is called a slice</li> <li>Selecting a slice is similar to selecting a character</li> <li></li> </ul> <pre><code>singers = \"Peter, Paul, and Mary\"\nprint(singers[0:5])\nprint(singers[7:11])\nprint(singers[17:21])\n\n'''\nsingers = \"Peter, Paul, and Mary\"\nprint(singers[0:5])\nprint(singers[7:11])\nprint(singers[17:21])\n\nOutput:\n\nPeter\nPaul\nMary\n'''\n</code></pre> <ul> <li>The slice operator <code>[n:m]</code>returns the part of the string from the n\u2019th character to the m\u2019th character, including the first but excluding the last.<ul> <li>Similar to range function</li> </ul> </li> </ul>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/9.7%209.8%20Slice%20Operator%20String%20Comparison/#98-string-comparison","title":"9.8 String Comparison","text":"<ul> <li>Using boolean to compare strings</li> </ul> <pre><code>word = \"banana\"\nif word == \"banana\":\n    print(\"Yes, we have bananas!\")\nelse:\n    print(\"Yes, we have NO bananas!\")\n\n''' Output\nYes, we have bananas!\n'''\n</code></pre>"},{"location":"Python/RuneStone%20Python/Chapter%209%20Strings/Chapter%209%20RuneStone/","title":"Chapter 9: Strings","text":"<ul> <li>9.3 Operations on Strings</li> <li>9.4 Index Operator</li> <li>9.5 String Methods &amp; String Format</li> <li>9.7 9.8 Slice Operator String Comparison</li> <li>9.10 Transversal and the for Loop By Item</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.10%20Representing%20Text/","title":"2.10 Representing Text","text":""},{"location":"Python/ZyBooks%20Python/Chapter%202/2.10%20Representing%20Text/#unicode","title":"Unicode","text":"<ul> <li>Python uses Unicode to represent every possible character as a unique number, known as a code point<ul> <li>Ex: The character 'G' has the code point decimal value of 71</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.10%20Representing%20Text/#escape-sequences","title":"Escape Sequences","text":"<ul> <li>** is a term that the interpreter recognizes as the start to a special character, like \\n for newline**.</li> <li>These two character sequences are escape sequences</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.10%20Representing%20Text/#raw-strings-and-converting-text","title":"Raw strings and converting text","text":"<ul> <li>Escape sequences can be ignored using a raw string<ul> <li>A raw string is created by adding an 'r' before a string literal, as in r'this is a raw string\\'', which would output as this is a raw string\\'</li> </ul> </li> </ul> <ul> <li>ord() returns the encoded integer value for the first character of a string<ul> <li>chr() does the reverse, gives the character for the encoded integer given</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.10%20Representing%20Text/#formatting-text","title":"Formatting text","text":""},{"location":"Python/ZyBooks%20Python/Chapter%202/2.2%20Identifiers/","title":"2.2 Identifiers","text":"<ul> <li>A good practice when naming variables is to use all lowercase letters and to place underscores between words.</li> <li>Lowercase and underscore convention for naming variables originates from the Python style guide, PEP 8<ul> <li>PEP 8 (PEP is an acronym for Python Enhancement Proposal) is a document that outlines the basics of how to write Python code neatly and consistently</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.3%20Objects/","title":"2.3 Objects","text":"<ul> <li>AKA variable<ul> <li>Value: A value such as \"20\", \"abcdef\", or 55.</li> <li>Type: The type of the object, such as integer or string.<ul> <li>print(type('abc')) tells you that this is a string</li> </ul> </li> <li>Identity: A unique identifier that describes the object.<ul> <li>print(id('abc')) will most likely tell you where 'abc' is stored in the memory</li> </ul> </li> </ul> </li> <li><code>del variable_name</code> deletes the object from interpreter</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.4%20Numeric%20Types%20Floating-Point/","title":"2.4 Numeric Types: Floating-Point","text":"<ul> <li>A floating-point number is a real number like 98.6 or .0001</li> <li>Floating-point refers to the decimal point being able to appear anywhere (float) in the number.</li> <li>A Floating-point literal is written with the fractional part even if the fraction is 0<ul> <li>1.0, 0.0, 99.0</li> </ul> </li> </ul> <ul> <li> <p>Overflow</p> <ul> <li>Is an error that occurs when a float-type object is outside of + or - 308. Ex: 1..8x10^309, 1.8e-309, 2.0^1024</li> <li>This is because it is too large for the memory allocated by the interpreter</li> </ul> <p></p> </li> <li> <p>In general:</p> <ul> <li>Floating-point types are for quantities measured, such as distances, temps, etc</li> <li>Integer types are for quantities counted, such as number of cars, students, etc.</li> </ul> </li> <li> <p>Manipulating Float-point output</p> <ul> <li>To reduce the number of decimals show (like for currency)</li> <li>The syntax for outputting the float myFloat with two digits after the decimal point is</li> </ul> <pre><code>print('{:.2f}'.format(myFloat))\n</code></pre> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.5%202.6%202.7%20Expressions/","title":"2.5/6/7 Expressions","text":""},{"location":"Python/ZyBooks%20Python/Chapter%202/2.5%202.6%202.7%20Expressions/#operators","title":"Operators","text":""},{"location":"Python/ZyBooks%20Python/Chapter%202/2.5%202.6%202.7%20Expressions/#order-of-operations","title":"Order Of Operations","text":""},{"location":"Python/ZyBooks%20Python/Chapter%202/2.5%202.6%202.7%20Expressions/#compound-operators","title":"Compound Operators","text":"<ul> <li>Provide shorthand way to update a variable</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.5%202.6%202.7%20Expressions/#division-and-modulo","title":"Division and Modulo","text":"<p>The division operator / performs division and returns a floating-point number. Ex:</p> <ul> <li>20 / 10 is 2.0.</li> <li>50 / 50 is 1.0.</li> <li>5 / 10 is 0.5.</li> </ul> <p>The floored division operator // can be used to round down the  result of a floating-point division to the closest whole number value.  The resulting value is an integer type if both operands are integers; if  either operand is a float, then a float is returned:</p> <ul> <li>20 // 10 is 2.</li> <li>50 // 50 is 1.</li> <li>5 // 10 is 0. (5/10 is 0 and the remainder 5 is thrown away).</li> <li>5.0 // 2 is 2.0</li> </ul> <p>For division, the second operand of / or // must never be 0, because division by 0 is mathematically undefined.</p> <p>The modulo operator (%) evaluates the remainder of the division of two integer operands. Ex: 23 % 10 is 3.</p> <ul> <li>24 % 10 is 4. Reason: 24 / 10 is 2 with remainder 4.</li> <li>50 % 50 is 0. Reason: 50 / 50 is 1 with remainder 0.</li> <li>1 % 2 is 1. Reason: 1 / 2 is 0 with remainder 1.</li> </ul> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.8%202.9%20Module%20Basics/","title":"2.8/9 Module Basics","text":""},{"location":"Python/ZyBooks%20Python/Chapter%202/2.8%202.9%20Module%20Basics/#modules","title":"Modules","text":"<ul> <li>A module is a file containing Python code that can be used by other modules or scripts.</li> <li>Programmer first imports module at beginning of file</li> <li>A module is made available for use via the import statement.</li> <li>Once a module is imported, any object defined in that module can be accessed using dot notation.<ul> <li>Ex: A variable speed_of_light defined in universe.py is accessed via universe.speed_of_light.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.8%202.9%20Module%20Basics/#importing-modules-and-scripts","title":"Importing Modules and Scripts","text":"<ul> <li>Importing Modules and Scripts<ul> <li>if the value of name is main then the file was executed as a script.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/2.8%202.9%20Module%20Basics/#math-module","title":"Math Module","text":"<ul> <li>Contains number of math stuff: trig, log, etc</li> <li>Function: list of statements that can be executed simply by referring to the function's name.</li> <li>The process of invoking a function is referred to as a function call.</li> <li>The item passed to a function is referred to as an argument.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%202/Chapter%202%20ZyBook/","title":"Basics","text":"<ul> <li>2.2 Identifiers</li> <li>2.3 Objects</li> <li>2.4 Numeric Types Floating-Point</li> <li>2.5 2.6 2.7 Expressions</li> <li>2.8 2.9 Module Basics</li> <li>2.10 Representing Text</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.1%20String%20Basics/","title":"3.1 String Basics","text":""},{"location":"Python/ZyBooks%20Python/Chapter%203/3.1%20String%20Basics/#strings-and-string-literals","title":"Strings and string literals","text":"<ul> <li>A string is a sequence of characters, like the text MARY, that can be stored in a variable.</li> <li>A string literal is a string value specified in the source code of a program.</li> <li>The len() built-in function can be used to find the length of a string (and any other sequence type).</li> <li>.split() will break the string into a list</li> <li>end=' ' will stop print() from creating a newline<ul> <li>print('Continue bidding?', end=' ')</li> </ul> </li> </ul> <ul> <li> <p>As a sequence type, every character in a string has an index, or position, starting at 0 from the leftmost character.</p> <ul> <li>A programmer can access a character at a specific index by appending brackets [ ] containing the index:</li> </ul> <p></p> <ul> <li>Negative numbers will make it start from the right side rather than left</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.1%20String%20Basics/#changing-string-variables-and-concatenating-strings","title":"Changing String variables and concatenating strings","text":"<ul> <li>Individual characters of a string cannot be changed, but the string itself can be altered by updating the entire variable.</li> <li> <p>Concatenation: combining strings</p> <p></p> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.10%20String%20Formatting/","title":"3.10 String Formatting","text":""},{"location":"Python/ZyBooks%20Python/Chapter%203/3.10%20String%20Formatting/#format-specification","title":"Format Specification","text":"<ul> <li>A format specification inside of a replacement field allows a value's formatting in the string to be customized<ul> <li>a variable with the integer value 4 can be output as a floating-point number (4.0) or with leading zeros (004).</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.10%20String%20Formatting/#referencing-format-values-correctly","title":"Referencing format() values correctly","text":"<ul> <li>The colon : in the replacement field separates the \"what\" on the left from the \"how\" on the right.<ul> <li>side may be omitted (inferred positional replacement)</li> <li>a number (positional replacement)</li> <li>a name (named replacement)</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.10%20String%20Formatting/#alternative-string-formatting","title":"Alternative string formatting","text":"<ul> <li>A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'. These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.</li> <li> <p>print(f'Amount: ${dollars:.2f}')</p> <p>Ex: Amount: $1.25</p> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.2%20List%20basics/","title":"3.2 List basics","text":""},{"location":"Python/ZyBooks%20Python/Chapter%203/3.2%20List%20basics/#creating-a-list","title":"Creating a list","text":"<ul> <li>A container is a construct used to group related values together and contains references to other objects instead of data.</li> <li>A list is a container created by surrounding a sequence of variables or literals with brackets [ ].<ul> <li>Ex: my_list = [10, 'abc']</li> </ul> </li> <li>A list item is called an element</li> <li>A list is also a sequence, meaning the contained elements are ordered by position in the list, known as the element's index, starting with 0</li> <li>lists can be empty</li> <li> <p>lists are mutable, which means they can be altered:</p> <p></p> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.2%20List%20basics/#add-and-remove-elements-from-list","title":"Add and remove elements from list","text":"<ul> <li>A method instructs an object to perform some action, and is executed by specifying the method name following a \".\" symbol and an object.</li> <li>list.append(value): Adds value to the end of list.<ul> <li>Ex: my_list.append('abc')</li> </ul> </li> <li>list.pop(i): Removes the element at index i from list.<ul> <li>Ex: my_list.pop(1)</li> </ul> </li> <li>list.remove(v): Removes the first element whose value is v.<ul> <li>Ex: my_list.remove('abc')</li> </ul> </li> <li>Sequence-type methods and functions</li> </ul> <p>Example:</p> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.3%20Tuple%20Basics/","title":"3.3 Tuple Basics","text":"<ul> <li>Tuples behaves similar to a list but is immutable \u2013 once created the tuple's elements cannot be changed</li> <li>A tuple is also a sequence type, supporting len(), indexing, and other sequence type functions</li> <li>Typically, tuples are surrounded with parentheses, as in (5, 15, 20)</li> <li>Recall that a tuple doesn't require parentheses around the contents, as the comma indicates a tuple should be created</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.3%20Tuple%20Basics/#named-tuples","title":"Named Tuples","text":"<ul> <li>A named tuple allows the programmer to define a new simple data type that consists of named attributes<ul> <li>A Car named tuple with fields like Car.price and Car.horsepower would more clearly represent a car object than a list with index positions correlating to some attributes.</li> </ul> </li> <li>The namedtuple package must be imported to create a new named tuple.</li> </ul> <ul> <li>namedtuple() only creates the new simple data type, and does not create new data objects. Above, a new data object is not created until Car() is called with appropriate values. A data object's attributes can be accessed using dot notation, as in chevy_blazer.price. This \"named\" attribute is simpler to read than if using a list or tuple referenced via index like chevy_blazer[2].</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.4%20Set%20Basics/","title":"3.4 Set Basics","text":"<ul> <li>A set is an unordered collection of unique elements. Sets have the following properties:<ul> <li>Elements are unordered: Elements in the set do not have a position or index.</li> <li>Elements are unique: No elements in the set share the same value.</li> </ul> </li> <li>A set can be created using the set() function, which accepts a sequence-type iterable object (list, tuple, string, etc.)</li> <li> <p>A set literal can be written using curly braces { } with commas separating set elements.</p> <ul> <li>set literals execute twice as quickly</li> </ul> <p></p> </li> <li> <p>an empty set can only be created using set()</p> </li> <li>index operator is not valid cause the set is unordered and positions don't matter</li> </ul> <pre><code># Initial list contains some duplicate values\nfirst_names = [ 'Harry', 'Hermione', 'Ron', 'Harry', 'Albus', 'Ron', 'Ron' ]\n\n# Creating a set removes any duplicate values\nnames_set = set(first_names)\n\nprint(names_set)\n</code></pre>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.4%20Set%20Basics/#modifying-sets","title":"Modifying Sets","text":"<ul> <li>Sets are mutable, elements can be added or removed.</li> <li>The add() method places a new element into the set if the set does not contain an element with the provided value.<ul> <li>set.add(value): Add value into the set. Ex: my_set.add('abc')</li> </ul> </li> <li>The remove() and pop() methods remove an element from the set.<ul> <li>set.remove(value): Remove the element with given value from the set. Raises KeyError if value is not found. Ex: my_set.remove('abc')</li> <li>set.pop(): Remove a random element from the set. Ex: my_set.pop()</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.4%20Set%20Basics/#set-operations","title":"Set operations","text":""},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/","title":"3.5 Dictionary Basics","text":""},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/#creating-a-dictionary","title":"Creating a dictionary","text":"<ul> <li>A dictionary is a Python container used to describe associative relationships.</li> <li>A dictionary is represented by the dict object type</li> <li>A dict object is created using curly braces { } to surround the key:value pairs<ul> <li>Ex: players = {'Lionel Messi': 10, 'Cristiano Ronaldo': 7}</li> </ul> </li> <li>An empty dictionary is created with the expression players = { }</li> <li>Why use a dictionary rather than a list?<ul> <li>Ex: If a program contains a collection of anonymous student test scores, those scores should be stored in a list. However, if each score is associated with a student name, a dictionary could be used to associate student names to their score.</li> <li>Other examples of associative relationships include last names and addresses, car models and price, or student ID number and university email address.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/#accessing-dictionary-entries","title":"Accessing dictionary entries","text":"<ul> <li>Dictionaries maintain a left-to-right ordering, dictionary entries cannot be accessed by indexing</li> <li>To access an entry, the key is specified in brackets [ ].<ul> <li>If no entry with a matching key exists in the dictionary, then a KeyError runtime error occurs and the program is terminated.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/#adding-modifying-and-removing-dictionary-entries","title":"Adding, modifying, and removing dictionary entries","text":"<ul> <li>A new dictionary entry is added by using brackets to specify the key: prices['banana'] = 1.49</li> <li>The del keyword is used to remove entries from a dictionary: del prices['papaya'] removes the entry whose key is 'papaya'.<ul> <li>If the requested key to delete does not exist then a KeyError occurs.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/#adding-new-entries-to-a-dictionary","title":"Adding new entries to a dictionary:","text":"<ul> <li>dict[k] = v: Adds the new key-value pair k-v, if dict[k] does not already exist.<ul> <li>Example: students['John'] = 'A+'</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/#modifying-existing-entries-in-a-dictionary","title":"Modifying existing entries in a dictionary:","text":"<ul> <li>dict[k] = v: Updates the existing entry dict[k], if dict[k] already exists.<ul> <li>Example: students['Jessica'] = 'A+'</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.5%20Dictionary%20Basics/#removing-entries-from-a-dictionary","title":"Removing entries from a dictionary:","text":"<ul> <li>del dict[k]: Deletes the entry dict[k].<ul> <li>Example: del students['Rachel']</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.6%20Common%20Data%20Types%20Summary/","title":"3.6 Common Data Types Summary","text":""},{"location":"Python/ZyBooks%20Python/Chapter%203/3.6%20Common%20Data%20Types%20Summary/#common-data-types","title":"Common Data Types","text":"<ul> <li>Numeric types int and float</li> </ul> <ul> <li>Sequence and mapping types</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.6%20Common%20Data%20Types%20Summary/#list-example","title":"List Example","text":"<p>my_list = [10, 'abc']</p>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.6%20Common%20Data%20Types%20Summary/#tuple-example","title":"Tuple Example","text":"<p>my_tuple = (1, \"Hello\", 3.4)</p>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.6%20Common%20Data%20Types%20Summary/#set-example","title":"Set Example","text":"<p>num1 = set([1, 2, 3])</p>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.6%20Common%20Data%20Types%20Summary/#set-literal-example","title":"Set Literal Example","text":"<p>my_set = {1.0, \"Hello\", (1, 2, 3)}</p>"},{"location":"Python/ZyBooks%20Python/Chapter%203/3.8%20Type%20Conversions/","title":"3.8 Type Conversions","text":"<ul> <li>A type conversion is a conversion of one type to another, such as an int to a float.</li> <li>An implicit conversion is a type conversion automatically made by the interpreter, usually between numeric types</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%203/Chapter%203%20ZyBook/","title":"String Formatting","text":"<ul> <li>3.1 String Basics</li> <li>3.2 List Basics</li> <li>3.3 Tuple Basics</li> <li>3.4 Set Basics</li> <li>3.5 Dictionary Basics</li> <li>3.6 Common Data Types Summary</li> <li>3.8 Type Conversions</li> <li>3.10 String Formatting</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.10%20Order%20of%20evaluation/","title":"4.10 Order of evaluation","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.10%20Order%20of%20evaluation/#precedence-rules","title":"Precedence rules","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.10%20Order%20of%20evaluation/#common-error-missing-parentheses","title":"Common Error: Missing parentheses","text":"<ul> <li>Good practice is to use parentheses in expressions to make the intended order of evaluation explicit.</li> <li>Examples:<ul> <li>not a == b intending to mean (not a) == b, but in fact the interpreter computes not (a == b)</li> <li>w and x == y and z intending (w and x) == (y and z), but the interpreter computes (w and (x == y)) and z</li> <li>not x + y &lt; 5 intending (not x) + y &lt; 5, but the interpreter computes not ((x + y) &lt; 5)</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.11%20Code%20Blocks%20and%20indention/","title":"4.11 Code Blocks and indention","text":"<ul> <li>A code block is a series of statements that are grouped together<ul> <li>The initial code block is not indented</li> <li>A new code block can follow a statement that ends with a colon, such as an \"if\" or \"else\"</li> <li>In addition, a new code block must be more indented than the previous code block.</li> <li>Good practice is to use the standard recommended 4 columns per indentation level</li> </ul> </li> <li>A common error for new Python programmers is the mixing of tabs and spaces.<ul> <li>Use 4 spaces</li> <li>Many editors consider a tab to be equivalent to either 3 or 4 spaces, while in Python a tab is equivalent only to another tab.</li> <li>A program that mixes tabs and space to indent code blocks will automatically generate an IndentationError from the interpreter in Python 3</li> <li>Good practice is to use spaces only when indenting code, and to set text editor options to automatically use spaces when possible.</li> </ul> </li> </ul> <p>Example of indentation:</p> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.11%20Code%20Blocks%20and%20indention/#special-cases","title":"Special cases","text":"<ul> <li>The number of columns of text considered to be acceptable varies from 80 to 120</li> <li>Good practice is to use the widely accepted standard of 80 columns.<ul> <li>A few exceptions to the rules of indentation deal with very long statements that require more than one line and wrap to the next line.<ul> <li>Does not count as a new code block</li> </ul> </li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.12%20Conditional%20Expressions/","title":"4.12 Conditional Expressions","text":"<ul> <li>if x is 2, then the conditional expression 5 if x==2 else 9*x evaluates to 5.</li> <li>Good practice is to restrict usage of conditional expressions to an assignment statement:<ul> <li>y = 5 if (x == 2) else 9*x</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.2%20Detecting%20equal%20values%20with%20branches/","title":"4.2 Detecting equal values with branches","text":"<ul> <li>The equality operator (==) evaluates to true if the left and right sides are equal. Ex: If numYears is 50, then numYears == 50 evaluates to true.</li> </ul> <ul> <li>An if-else statement executes one group of statements when an expression is true, and another group of statements when the expression is false</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.2%20Detecting%20equal%20values%20with%20branches/#multi-branch-if-else-statements","title":"Multi-branch if-else statements","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.4%20Detecting%20ranges%20with%20branches/","title":"4.4 Detecting ranges with branches","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.4%20Detecting%20ranges%20with%20branches/#relational-operators","title":"Relational Operators","text":"<ul> <li>A relational operator checks how one operand's value relates to another, like being greater than.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.4%20Detecting%20ranges%20with%20branches/#detecting-ranges-with-if-else-statements","title":"Detecting ranges with if-else statements","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.4%20Detecting%20ranges%20with%20branches/#operator-chaining","title":"Operator chaining","text":"<ul> <li>a &lt; b &lt; c determines whether b is greater-than a but less-than c.<ul> <li> <p>Chaining performs comparisons left to right, evaluating a &lt; b first</p> <ul> <li>If the result is True, then b &lt; c is evaluated next</li> <li>If the result of the first comparison a &lt; b is False, then there is no need to continue evaluating the rest of the expression.</li> </ul> <p>**Note that a is not compared to c</p> </li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.5%20Detecting%20ranges%20using%20logical%20operators/","title":"4.5 Detecting ranges using logical operators","text":"<ul> <li>A logical operator treats operands as being True or False, and evaluates to True or False</li> <li>Logical operators include AND, OR, and NOT</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.5%20Detecting%20ranges%20using%20logical%20operators/#booleans-and-logical-operators","title":"Booleans and logical operators","text":"<ul> <li>A Boolean refers to a value that is either True or False.<ul> <li>Note that True and False are keywords in Python and must be capitalized.</li> </ul> </li> </ul> <p>Examples:</p> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.7%20Detecting%20multiple%20features%20with%20branches/","title":"4.7 Detecting multiple features with branches","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.7%20Detecting%20multiple%20features%20with%20branches/#multiple-distinct-if-statements","title":"Multiple distinct if statements","text":"<ul> <li>Each if statement is independent, and thus more than one branch can execute, in contrast to the multi-branch if-else arrangement.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.7%20Detecting%20multiple%20features%20with%20branches/#nested-if-else-statements","title":"Nested if-else statements","text":"<ul> <li>A branch's statements can include any valid statements, including another if-else statement, which are known as nested if-else statements.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.8%20Comparing%20data%20types%20and%20common%20errors/","title":"4.8 Comparing data types and common errors","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.8%20Comparing%20data%20types%20and%20common%20errors/#comparing-characters-strings-and-floating-point-types","title":"Comparing characters, strings, and floating-point types","text":"<ul> <li>The relational and equality operators work for integer, character, and floating-point built-in types.<ul> <li>Floating-point types should not be compared using the equality operators, due to the imprecise representation of floating-point numbers</li> </ul> </li> <li>Numbers are arithmetically compared.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.9%20Membership%20and%20identity%20operators/","title":"4.9 Membership and identity operators","text":""},{"location":"Python/ZyBooks%20Python/Chapter%204/4.9%20Membership%20and%20identity%20operators/#membership-operators-innot-in","title":"Membership operators: in/not in","text":"<ul> <li>Determining whether a specific value can be found within a container, such as a list or dictionary</li> <li>The in and not in operators, known as membership operators, yield True or False if the left operand matches the value of some element in the right operand, which is always a container.</li> </ul> <ul> <li>Membership operators can be used to check whether a string is a substring, or matching subset of characters, of a larger string.<ul> <li>Example, 'abc' in '123abcd' returns True because the substring abc exists in the larger string.</li> </ul> </li> </ul> <ul> <li>Finding membership in a dictionary only applies to the key, NOT the value</li> </ul> <p>Example:</p> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%204/4.9%20Membership%20and%20identity%20operators/#identity-operators-isis-not","title":"Identity operators: is/is not","text":"<ul> <li>The programmer can use the identity operator, is, to check whether two operands are bound to a single object.</li> <li>The inverse identity operator, is not, gives the negated value of 'is'. Thus, if x is y is True, then x is not y is False.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%204/Chapter%204%20ZyBook/","title":"Branching","text":"<ul> <li>4.2 Detecting equal values with branches</li> <li>4.4 Detecting ranges with branches</li> <li>4.5 Detecting ranges using logical operators</li> <li>4.7 Detecting multiple features with branches</li> <li>4.8 Comparing data types and common errors</li> <li>4.9 Membership and identity operators</li> <li>4.10 Order of evaluation</li> <li>4.11 Code Blocks and indention</li> <li>4.12 Conditional Expressions</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.1%205.2%205.3%20Loops/","title":"5.1/2/3 Loops","text":"<ul> <li>A loop is a program construct that repeatedly executes the loop's statements (known as the loop body) while the loop's expression is true; when false, execution proceeds past the loop</li> <li>Each time through a loop's statements is called an iteration.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.1%205.2%205.3%20Loops/#while-loop-basics","title":"While loop basics","text":"<ul> <li>A while loop is a construct that repeatedly executes an indented block of code (known as the loop body) as long as the loop's expression is True<ul> <li>At the end of the loop body, execution goes back to the while loop statement and the loop expression is evaluated again</li> </ul> </li> <li>But, if the expression evaluates to False, then execution instead proceeds to below the loop body.</li> </ul> <ul> <li>Sentinel value: the value needed to terminate a loop</li> </ul> <ul> <li>Good practice is to include greater than or less than along with equality in a loop expression to help avoid infinite loops.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.1%205.2%205.3%20Loops/#example-greatest-common-divisor","title":"Example: Greatest Common Divisor","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.1%205.2%205.3%20Loops/#example-conversation","title":"Example: Conversation","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.1%205.2%205.3%20Loops/#example-getting-input-until-a-sentinel-is-seen","title":"Example: Getting input until a sentinel is seen","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.10%20Break%20and%20Continue/","title":"5.10 Break and Continue","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.10%20Break%20and%20Continue/#break-statements","title":"Break statements","text":"<ul> <li>A break statement in a loop causes the loop to exit immediately.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.10%20Break%20and%20Continue/#continue-statements","title":"Continue statements","text":"<ul> <li>A continue statement in a loop causes an immediate jump to the while or for loop header statement.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.11%20Loop%20else/","title":"5.11 Loop else","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.11%20Loop%20else/#loop-else-construct","title":"Loop else construct","text":"<ul> <li>A loop may optionally include an else clause that executes only if the loop terminates normally, not using a break statement.</li> </ul> <p>The complete forms of while and for loops are:</p> <p></p> <p></p> <ul> <li>The loop else construct executes if the loop completes normally.</li> <li>Example: a special message \"All names printed\" is displayed if the entire list of names is completely iterated through:</li> </ul> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.12%20Getting%20index%20and%20value%20while%20looping%20enumerate/","title":"5.12 Getting index and value while looping: enumerate()","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.12%20Getting%20index%20and%20value%20while%20looping%20enumerate/#enumerate","title":"Enumerate()","text":"<ul> <li>A programmer commonly requires both the current position index and corresponding element value when iterating over a sequence.</li> <li>Example below demonstrates how using a for loop with range() and len() to iterate over a sequence generates a position index but requires extra code to retrieve a value:</li> </ul> <ul> <li>Similarly, a for loop that iterates over a container obtains the value directly, but must look up the index with a function call:</li> </ul> <ul> <li>The enumerate() function retrieves both the index and corresponding element value at the same time, providing a cleaner and more readable solution.</li> </ul> <ul> <li>The enumerate() function yields a new tuple each iteration of the loop, with the tuple containing the current index and corresponding element value.<ul> <li>In the example above, the for loop unpacks the tuple yielded by each iteration of enumerate(origins) into two new variables: \"index\" and \"value\".</li> </ul> </li> <li>Unpacking is a process that performs multiple assignments at once, binding comma-separated names on the left to the elements of a sequence on the right.<ul> <li>Ex: num1, num2 = [350, 400] is equivalent to the statements num1 = 350 and num2 = 400.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.4%20Counting/","title":"5.4 Counting","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.4%20Counting/#counting-up-with-a-while-loop","title":"Counting up with a while loop","text":"<ul> <li>The programmer can use a variable to count the number of iterations, called a loop variable</li> </ul> <ul> <li>A common error is to forget to include the loop variable update (e.g., i = i +1) at the end of the loop, causing an unintended infinite loop.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.4%20Counting/#counting-down-with-a-while-loop","title":"Counting down with a while loop","text":"<ul> <li>The loop body executes when i is 5, 4, 3, 2, and 1, but does not execute when i reaches 0.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.4%20Counting/#shorthand-operators","title":"Shorthand operators","text":"<ul> <li>Covered in 2.5/6/7</li> <li>The item on the right can be an expression, so num *= x + y is shorthand for num = num * (x + y)</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.5%20For%20Loops/","title":"5.5 For Loops","text":"<ul> <li>A common programming task is to access all of the elements in a container. Ex: Printing every item in a list.</li> <li>A for loop statement loops over each element in a container one at a time, assigning a variable with the next element that can then be used in the loop body</li> <li>The container in the for loop statement is typically a list, tuple, or string</li> </ul> <ul> <li>The variable in the for loop is created with the for loop statement</li> </ul> <ul> <li>For sequence types like lists and tuples, the assignment order follows the position of the elements in the container, starting with position 0</li> <li> <p>Iterating over a dictionary using a for loop assigns the loop variable with the keys of the dictionary. The values can then be accessed using the key:</p> <p></p> </li> <li> <p>A for loop can also iterate over a string. Each iteration assigns the loop variable with the next character of the string. Strings are sequence types just like lists, so the behavior is identical (leftmost character first, then each following character).</p> </li> </ul> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.5%20For%20Loops/#for-loop-examples","title":"For Loop Examples","text":"<ul> <li>The program below uses an additional variable to sum list elements to calculate weekly revenue and an average daily revenue.</li> </ul> <ul> <li>A for loop may also iterate backwards over a sequence, starting at the last element and ending with the first element, by using the reversed() function to reverse the order of the elements.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.6%20Counting%20using%20range%28%29%20function/","title":"5.6 Counting using range() function","text":"<ul> <li>The range() function allows counting in for loops as well.</li> <li>range() generates a sequence of integers between a starting integer that is included in the range, an ending integer that is not included in the range, and an integer step value.</li> <li>The sequence is generated by starting at the start integer and incrementing by the step value until the ending integer is reached or surpassed.</li> <li>The range() function can take up to three integer arguments:<ul> <li><code>range(Y)</code> generates a sequence of all non-negative integers less than Y. Ex: <code>range(3)</code> creates the sequence 0, 1, 2.</li> <li><code>range(X, Y)</code> generates a sequence of all integers &gt;= X and &lt; Y. Ex: <code>range(-7, -3)</code> creates the sequence -7, -6, -5, -4.</li> <li><code>range(X, Y, Z)</code>, where Z is positive, generates a sequence of all integers &gt;= X and &lt; Y, incrementing by Z. Ex: <code>range(0, 50, 10)</code> creates the sequence 0, 10, 20, 30, 40.</li> <li><code>range(X, Y, Z)</code>, where Z is negative, generates a sequence of all integers &lt;= X and &gt; Y, incrementing by Z. Ex: <code>range(3, -1, -1)</code> creates the sequence 3, 2, 1, 0.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.7%20While%20vs%20For%20loops/","title":"5.7 While vs For loops","text":""},{"location":"Python/ZyBooks%20Python/Chapter%205/5.7%20While%20vs%20For%20loops/#while-loop-and-for-loop-correspondence","title":"While loop and for loop correspondence","text":"<ul> <li>Both for loops and while loops can be used to count a specific number of loop iterations</li> <li>A for loop combined with range() is generally preferred over while loops, since for loops are less likely to become stuck in an infinite loop situation</li> </ul> <p>General Rules:</p> <ol> <li>Use a for loop when the number of iterations is computable before entering the loop, as when counting down from X to 0, printing a string N times, etc.</li> <li>Use a for loop when accessing the elements of a container, as when adding 1 to every element in a list, or printing the key of every entry in a dict, etc.</li> <li>Use a while loop when the number of iterations is not computable before entering the loop, as when iterating until a user enters a particular character.</li> </ol>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.8%20Nested%20Loops/","title":"5.8 Nested Loops","text":"<ul> <li>A nested loop is a loop that appears as part of the body of another loop</li> <li>The nested loops are commonly referred to as the outer loop and inner loop.</li> <li>Nested loops have various uses. One use is to generate all combinations of some items.<ul> <li>Ex: The following program generates all two letter .com Internet domain names.<ul> <li>Recall that ord() converts a 1-character string into an integer, and chr() converts an integer into a character.<ul> <li>Thus, chr(ord('a') + 1) results in 'b'</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>nested loop example that graphically depicts an integer's magnitude by using asterisks, creating what is commonly called a histogram::</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/5.9%20Developing%20programs%20incrementally/","title":"5.9 Developing programs incrementally","text":"<ul> <li>A programmer should not write the entire program and then run the program\u2014hoping the program works.</li> <li>Experienced programmers practice incremental programming, starting with a simple version of the program, and then growing the program little-by-little into a complete version.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%205/Chapter%205%20ZyBook/","title":"Looping","text":"<ul> <li>5.1/2/3 Loops</li> <li>5.4 Counting</li> <li>5.5 For Loops</li> <li>5.6 Counting using range() function</li> <li>5.7 While vs For loops</li> <li>5.8 Nested Loops</li> <li>5.9 Developing programs incrementally</li> <li>5.10 Break and Continue</li> <li>5.11 Loop else</li> <li>[[5.12 Getting index and value while looping: enumerate()]]</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/","title":"6.1 User-Defined Functions","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/#functions-general","title":"Functions (General)","text":"<ul> <li>A program may perform the same operation repeatedly, causing a large and confusing program due to redundancy.<ul> <li>Program redundancy can be reduced by creating a grouping of predefined statements for repeatedly used operations, known as a function.</li> <li>Even without redundancy, functions can prevent a main program from becoming large and confusing.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/#function-basics","title":"Function basics","text":"<ul> <li>A function is a named series of statements.</li> <li>A function definition consists of the new function's name and a block of statements. Ex: def calc_pizza_area():  An indented block of statements follows the definition.</li> <li>A function call is an invocation of the function's name, causing the function's statements to execute.<ul> <li>Python comes with a number of built-in functions, such as input(), int(), len(), etc. The def keyword is used to create new functions.</li> </ul> </li> <li>Good practice is to follow the convention of naming functions with lowercase letters and underscores, such as get_name or calc_area.</li> <li>The function call calc_pizza_area() in the animation below causes execution to jump to the function's statements. Execution returns to the original location after executing the function's last statement.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/#return-statements","title":"Return Statements","text":"<ul> <li>A function can only return one item, not two or more (though a list or a tuple with multiple elements could be returned)</li> <li>A function with no return statement, or a return statement with no following expression, returns the value None.<ul> <li>None is a special keyword that indicates no value.</li> <li>A function may also contain multiple return statements in different locations.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/#parameters","title":"Parameters","text":"<ul> <li>A parameter is a function input specified in a function definition. Ex: A pizza area function might have diameter as an input.</li> <li>An argument is a value provided to a function's parameter during a function call. Ex: A pizza area function might be called as calc_pizza_area(12.0) or as calc_pizza_area(16.0)<ul> <li>A parameter is like a variable definition.</li> <li>A parameter cannot be an expression:<ul> <li>NOT THIS: def my_fct(userNum + 5):</li> </ul> </li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/#multiple-or-no-parameters","title":"Multiple or no parameters","text":"<ul> <li>A function may have multiple parameters, which are separated by commas.</li> <li>A function definition with no parameters must still have the parentheses, as in: def calc_something():<ul> <li>The call to such a function must include parentheses, and they must be empty, as in: calc_something()</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.1%20User-Defined%20Functions/#hierarchical-function-calls","title":"Hierarchical function calls","text":"<ul> <li>A function's statements may include function calls, known as hierarchical function calls or nested function calls.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.10%20Scope%20of%20variables%20and%20functions/","title":"6.10 Scope of variables and functions","text":"<ul> <li>A variable or function object is only visible to part of a program, known as the object's scope.</li> <li>When a variable is created inside a function, the variable's scope is limited to inside that function.<ul> <li>Because a variable's name does not exist until bound to an object, the variable's scope is actually limited to after the first assignment of the variable until the end of the function.</li> </ul> </li> </ul> <p>The function's variables total_inches and centimeters are invisible to the code outside of the function and cannot be used</p> <ul> <li>Such variables defined inside a function are called local variables.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.10%20Scope%20of%20variables%20and%20functions/#global-variables","title":"Global variables","text":"<ul> <li>In contrast, a variable defined outside of a function is called a global variable.</li> <li>A global variable's scope extends from assignment to the end of the file and can be accessed inside of functions.</li> <li>A global statement must be used to change the value of a global variable inside of a function.</li> </ul> <ul> <li>To be able to call a function, the interpreter must have already evaluated the function definition (thus binding the function name to a function object).</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.11%20Namespaces%20and%20scope%20resolution/","title":"6.11 Namespaces and scope resolution","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.11%20Namespaces%20and%20scope%20resolution/#namespace","title":"Namespace","text":"<ul> <li>A namespace maps names to objects.</li> <li>The Python interpreter uses namespaces to track all of the objects in a program</li> <li> <p>In fact, a namespace is actually just a normal Python dictionary whose keys are the names and whose values are the objects</p> <ul> <li>A programmer can examine the names in the current local and global namespace by using the locals() and globals() built-in functions.</li> </ul> <p></p> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.11%20Namespaces%20and%20scope%20resolution/#scope-and-scope-resolution","title":"Scope and scope resolution","text":"<ul> <li>Scope is the area of code where a name is visible.</li> <li>Namespaces are used to make scope work.</li> <li>Each scope, such as global scope or a local function scope, has its own namespace</li> <li>If a namespace contains a name at a specific location in the code, then that name is visible and a programmer can use it in an expression.</li> </ul> <p>There are at least three nested scopes that are active at any point in a program's execution: 1</p> <ol> <li>Built-in scope \u2013 Contains all of the built-in names of Python, such as <code>int()</code>, <code>str()</code>, <code>list()</code>, <code>range()</code>, etc.</li> <li>Global scope \u2013 Contains all globally defined names outside of any functions.</li> <li>Local scope \u2013 Usually refers to scope within the currently executing function, but is the same as global scope if no function is executing.</li> <li>When a name is referenced in code, the local scope's namespace is the first checked, followed by the global scope, and finally the built-in scope.</li> <li>If the name cannot be found in any namespace, the interpreter generates a NameError.</li> <li>The process of searching for a name in the available namespaces is called scope resolution.</li> </ol>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.11%20Namespaces%20and%20scope%20resolution/#more-scoping-and-namespaces","title":"More scoping and namespaces","text":"<p>Note that the Python Tutor tool uses the term \"frame\" in place of \"namespace\".</p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.12%20Function%20Arguments/","title":"6.12 Function Arguments","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.12%20Function%20Arguments/#function-arguments-and-mutability","title":"Function arguments and mutability","text":"<ul> <li>Arguments to functions are passed by object reference, a concept known in Python as pass-by-assignment.</li> <li>When a function is called, new local variables are created in the function's local namespace by binding the names in the parameter list to the passed arguments.</li> </ul> <ul> <li>When a function modifies a parameter, whether or not that modification is seen outside the scope of the function depends on the mutability of the argument object.</li> <li>If the object is immutable, such as a string or integer, then the modification is limited to inside the function. Any modification to an immutable object results in the creation of a object in the function's local scope, thus leaving the original argument object unchanged.</li> <li>If the object is mutable, then in-place modification of the object can be seen outside the scope of the function. Any operation like adding elements to a container or sorting a list that is performed within a function will also affect any other variables in the program that reference the same object.</li> </ul> <ul> <li>Sometimes a programmer needs to pass a mutable object to a function but wants to make sure that the function does not modify the object at all.</li> </ul> <p>One method to avoid unwanted changes is to pass a copy of the object as the argument instead, like in the statement my_func(num_list[:])</p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.13%20Keyword%20arguments%20and%20default%20parameter%20value/","title":"6.13 Keyword arguments and default parameter values","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.13%20Keyword%20arguments%20and%20default%20parameter%20value/#keyword-arguments","title":"Keyword arguments","text":"<p>In the example above, a programmer might very easily swap the positions of some of the arguments in the function call, potentially introducing a bug into the program.</p> <ul> <li>Python provides for keyword arguments that allow arguments to map to parameters by name, instead of implicitly by position in the argument list.</li> <li>When using keyword arguments, the argument list does not need to follow a specific ordering.</li> </ul> <p></p> <ul> <li>Good practice is to use keyword arguments for any function containing more than approximately 4 arguments.</li> </ul> <p></p> <p>A common error is to place keyword arguments before all position arguments, which generates an exception.</p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.13%20Keyword%20arguments%20and%20default%20parameter%20value/#default-parameter-values","title":"Default parameter values","text":"<ul> <li>Sometimes a function has parameters that are optional.</li> <li>A function can have a default parameter value for one or more parameters, meaning that a function call can optionally omit an argument, and the default parameter value will be substituted for the corresponding omitted argument.</li> <li>EXAMPLE: The fourth parameter indicates the desired style, with 0 meaning American style, and 1 meaning European style. For July 30, 2012, the American style is 7/30/2012 and the European style is 30/7/2012.</li> </ul> <p>The fourth (and last) parameter is defined with a default value: style=0. If the function call does not provide a fourth argument, then style has value 0. A parameter's default value is the value used in the absence of an argument in the function call.</p> <ul> <li>If a parameter does not have a default value, then failing to provide an argument (either keyword or positional) generates an error.</li> <li>A common error is to provide a mutable object, like a list, as a default parameter</li> <li>Such a definition can be problematic because the default argument object is created only once, at the time the function is defined (when the script is loaded), and not every time the function is called</li> <li>EXAMPLE: The below program demonstrates the problem with mutable default objects and illustrates a solution that creates a new empty list each time the function is called:</li> </ul> <p></p> <p>The left program shows a function append_to_list() that has an empty list as default value of my_list.</p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.13%20Keyword%20arguments%20and%20default%20parameter%20value/#mixing-keyword-arguments-and-default-parameter-values","title":"Mixing keyword arguments and default parameter values","text":"<ul> <li>Mixing keyword arguments and default parameter values allows a programmer to omit arbitrary arguments from a function call.</li> <li>Because keyword arguments use names instead of position to match arguments to parameters, any argument can be omitted as long as that argument has a default value.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.14%20Arbitrary%20Argument%20Lists/","title":"6.14 Arbitrary Argument Lists","text":"<ul> <li>Sometimes a programmer doesn't know how many arguments a function requires</li> <li>A function definition can include a args* parameter that collects optional positional parameters into an arbitrary argument list** tuple.</li> </ul> <ul> <li>Adding a final function parameter of **kwargs creates a dictionary containing \"extra\" arguments not defined in the function definition<ul> <li>kwargs is short for keyword arguments.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.14%20Arbitrary%20Argument%20Lists/#args-and-kwargs-rules","title":"args and *kwargs rules:","text":"<ul> <li>The * and  characters in *args and kwargs are the important symbols.<ul> <li>Using \"args\" and \"kwargs\" is standard practice, but any valid identifier is acceptable (like perhaps using *condiments in the sandwich example).</li> </ul> </li> <li>One or both of args or *kwargs can be used.</li> <li>They must come last (and in that order if both are used) in the parameter list, otherwise an error occurs.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.15%20Multiple%20Function%20Output/","title":"6.15 Multiple Function Output","text":"<ul> <li>Occasionally a function should produce multiple output values</li> <li>However, function return statements are limited to returning only one value.</li> <li>A workaround is to package the multiple outputs into a single container, commonly a tuple, and to then return that container.</li> </ul> <ul> <li>Recall that a tuple doesn't require parentheses around the contents, as the comma indicates a tuple should be created</li> <li>The outputs could also have been returned in a list, as in return [mean, std_dev].</li> <li> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.15%20Multiple%20Function%20Output/#the-statement-average-standard_deviation-get_grade_statsstudent_scores-utilizes-unpacking-to-perform-multiple-assignments-at-once-so-that-average-and-standard_deviation-are-assigned-the-first-and-second-elements-from-the-returned-tuple","title":"The statement average, standard_deviation = get_grade_stats(student_scores) utilizes unpacking to perform multiple assignments at once, so that average and standard_deviation are assigned the first and second elements from the returned tuple.","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.16%20Help%21%20Using%20Docstrings%20to%20documents%20functions/","title":"6.16 Help! Using Docstrings to documents functions","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.16%20Help%21%20Using%20Docstrings%20to%20documents%20functions/#docstrings","title":"Docstrings","text":"<ul> <li>A large program can contain many functions with a wide variety of uses.</li> <li>A programmer should document each function, giving a high-level description of the purpose of the function, so that later readers of the code can more easily understand.</li> <li>A docstring is a string literal placed in the first line of a function body.</li> <li>A docstring starts and ends with three consecutive quotation marks.</li> <li>Good practice is to keep the docstring of a simple function as a single line, including the quotes. Furthermore, there should be no blank lines before or after the docstring.</li> <li>Multi-line docstrings can be used for more complicated functions to describe the function arguments.</li> <li>Multi-line docstrings should use consistent indentation for each line, separating the ending triple-quotes by a blank line.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.16%20Help%21%20Using%20Docstrings%20to%20documents%20functions/#the-help-function","title":"The help() function","text":"<ul> <li>The help() function can aid a programmer by providing them with all the documentation associated with an object</li> <li>A statement such as help(ticket_price) would print out the docstring for the ticket_price() function, providing the programmer with information about how to call that function.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.17%20Engineering%20examples/","title":"6.17 Engineering examples","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.17%20Engineering%20examples/#example-gas-equation","title":"Example: Gas equation","text":"<ul> <li>An equation used in physics and chemistry that relates pressure, volume, and temperature of a gas is PV = nRT.</li> <li>P is the pressure, V the volume, T the temperature, n the number of moles, and R a constant.</li> </ul> <p>The function below outputs the temperature of a gas given the other values.</p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.2%20Print%20Functions/","title":"6.2 Print Functions","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.2%20Print%20Functions/#printing-from-a-function","title":"Printing from a function","text":"<ul> <li>A common operation for a function is to print text</li> <li>A function that only prints typically does not return a value</li> <li>A function with no return statement is called a void function, and such a function returns the value None.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.2%20Print%20Functions/#calling-a-print-function-multiple-times","title":"Calling a print function multiple times","text":"<ul> <li>Program B is much more efficient and clean:</li> </ul> <ul> <li>Another example:</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.3%20Dynamic%20Typing/","title":"6.3 Dynamic Typing","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.3%20Dynamic%20Typing/#dynamic-and-static-typing","title":"Dynamic and static typing","text":"<ul> <li>A programmer can pass any type of object as an argument to a function.</li> <li>Example add() function can be used for int and strings</li> </ul> <ul> <li>The function's behavior of being able to add together different types is a concept called polymorphism.</li> <li>Python uses dynamic typing to determine the type of objects as a program executes</li> <li>In contrast to dynamic typing, many other languages like C, C++, and Java use static typing, which requires the programmer to define the type of every variable and every function parameter in a program's source code</li> <li> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.3%20Dynamic%20Typing/#dynamic-typing-typically-allows-for-more-flexibility-in-terms-of-the-code-that-a-programmer-can-write-but-at-the-expense-of-potentially-introducing-more-bugs-since-there-is-no-compilation-process-by-which-types-can-be-checked","title":"Dynamic typing typically allows for more flexibility in terms of the code that a programmer can write, but at the expense of potentially introducing more bugs, since there is no compilation process by which types can be checked.","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.4%20Reasons%20for%20defining%20functions/","title":"6.4 Reasons for defining functions","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.4%20Reasons%20for%20defining%20functions/#improving-program-readability","title":"Improving program readability","text":"<p>NOT EASY TO UNDERSTAND</p> <p></p> <p>EASY TO UNDERSTAND</p> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.4%20Reasons%20for%20defining%20functions/#modular-program-development","title":"Modular Program Development","text":"<ul> <li>Modular development is the process of dividing a program into separate modules that can be developed and tested separately and then integrated into a single program.<ul> <li>A programmer can use function stubs (described in depth elsewhere) to capture the high-level behavior of the required functions (or modules) before diving into details of each function, like planning a route for a road trip before starting to drive.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.4%20Reasons%20for%20defining%20functions/#avoid-writing-redundant-code","title":"Avoid writing redundant code","text":"<ul> <li>A function can be defined once, then called from multiple places in a program, thus avoiding redundant code<ul> <li>Examples of such functions are math module functions like sqrt() that make it to where square root doesn't need to be programmed each time</li> </ul> </li> <li>The skill of decomposing a program's behavior into a good set of functions is a fundamental part of programming that helps characterize a good programmer.</li> <li>Each function should have easily-recognizable behavior, and the behavior of the main program should be easily understandable via the sequence of function calls.</li> <li>A general guideline (especially for beginner programmers) is that a function's definition usually shouldn't have more than about 30 lines of code, although this guideline is not a strict rule.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.5%20Writing%20Mathematical%20Functions/","title":"6.5 Writing Mathematical Functions","text":"<ul> <li>A function is commonly defined to compute a mathematical calculation involving several numerical parameters and returning a numerical result</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.5%20Writing%20Mathematical%20Functions/#calling-functions-in-expressions","title":"Calling functions in expressions","text":"<ul> <li>A function call often appears within an expression:</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.5%20Writing%20Mathematical%20Functions/#modular-functions-for-mathematical-expressions","title":"Modular functions for mathematical expressions","text":"<ul> <li>Modularity allows more complex functions to incorporate simpler functions.</li> <li>Complex mathematical functions often call other mathematical functions.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.6%20Function%20Stubs/","title":"6.6 Function Stubs","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.6%20Function%20Stubs/#incremental-development-and-function-stubs","title":"Incremental development and function stubs","text":"<ul> <li>Programs are typically written using incremental development</li> <li>To assist with the incremental development process, programmers commonly introduce function stubs, which are function definitions whose statements haven't been written yet.</li> <li>The benefit of a function stub is that the high-level behavior of the program can be captured before diving into details of each function</li> <li>Capturing high-level behavior first may lead to better-organized code, reduced development time, and even to code with fewer bugs.</li> <li>A programmer writing a function stub should consider whether or not calling the unwritten function is a valid operation.<ul> <li>One approach is to use the pass keyword, which performs no operation except to act as a placeholder for a required statement.</li> </ul> </li> </ul> <p>The function steps_to_calories() above contains a single pass statement because at least one statement is required in any user-defined function</p> <p></p> <p>Another useful approach is to print a message when a function stub is called, thus alerting the user to the missing function statements.</p> <ul> <li>Good practice is for a stub to return -1 for a function that will have a return value.</li> <li>In some cases, a programmer may want a program to stop executing if an unfinished function is called<ul> <li>Ex: A program that requires user input should not execute if the user-defined function that gets input is not completed.</li> <li>In such cases, a NotImplementedError can be generated with the statement raise NotImplementedError</li> <li>The NotImplementedError indicates that the function is not implemented and causes the program to stop execution</li> </ul> </li> </ul> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.7%20Functions%20with%20branches%20loops/","title":"6.7 Functions with branches/loops","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.7%20Functions%20with%20branches%20loops/#example-auction-website-fee-calculator","title":"Example: Auction Website fee calculator","text":"<ul> <li>A function's block of statements may include branches, loops, and other statements.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.8%20Functions%20are%20objects/","title":"6.8 Functions are objects","text":"<ul> <li>A function is also an object in Python, having a type, identity, and value.</li> <li>A function definition like def print_face(): creates a new function object with the name print_face bound to that object.</li> <li> <p>A part of the value of a function object is compiled bytecode that represents the statements to be executed by the function</p> <ul> <li>A bytecode is a low-level operation, such as adding, subtracting, or loading from memory</li> </ul> <p></p> <p>The function adds 1 to an argument and returns the result. The corresponding bytecode for the function requires 4 bytecode operations to perform the addition, and 2 to return the result.</p> </li> <li> <p>Functions can be passed like any other object as an argument to another function</p> </li> <li> <p>Consider the following example, which defines two different functions print_human_head() and print_monkey_head().</p> <ul> <li>A third function print_figure() accepts a function as an argument, calling that function to print a head, and then printing a body.</li> </ul> <p></p> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.9%20Functions%20Common%20Errors/","title":"6.9 Functions: Common Errors","text":""},{"location":"Python/ZyBooks%20Python/Chapter%206/6.9%20Functions%20Common%20Errors/#copy-paste-errors","title":"Copy-paste errors","text":"<ul> <li>A common error is to copy-and-paste code among functions but then not complete all necessary modifications to the pasted code.<ul> <li>For example, a programmer might have developed and tested a function to convert a temperature value in Celsius to Fahrenheit, and then copied and modified the original function into a new function to convert Fahrenheit to Celsius as shown:</li> </ul> </li> </ul> <p>The programmer forgot to change the return statement to return Celsius rather than Fahrenheit.</p>"},{"location":"Python/ZyBooks%20Python/Chapter%206/6.9%20Functions%20Common%20Errors/#return-errors","title":"Return Errors","text":"<ul> <li>Another common error is to return the wrong variable, like if return temperature had been used in the temperature conversion program by accident. The function will work and sometimes even return the correct value.</li> <li>Another common error is to fail to return a value for a function.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%206/Chapter%206%20ZyBook/","title":"Functions","text":"<ul> <li>6.1 User-Defined Functions</li> <li>6.2 Print Functions</li> <li>6.3 Dynamic Typing</li> <li>6.4 Reasons for defining functions</li> <li>6.5 Writing Mathematical Functions</li> <li>6.6 Function Stubs</li> <li>6.7 Functions with branches/loops</li> <li>6.8 Functions are objects</li> <li>[[6.9 Functions: Common Errors]]</li> <li>6.10 Scope of variables and functions</li> <li>6.11 Namespaces and scope resolution</li> <li>6.12 Function Arguments</li> <li>[[6.13 Keyword arguments and default parameter values]]</li> <li>[[6.13 Keyword arguments and default parameter values]]</li> <li>6.14 Arbitrary Argument Lists</li> <li>6.15 Multiple Function Output</li> <li>6.16 Help! Using Docstrings to documents functions</li> <li>6.17 Engineering examples</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.1%20String%20Slicing/","title":"7.1 String Slicing","text":""},{"location":"Python/ZyBooks%20Python/Chapter%207/7.1%20String%20Slicing/#string-slicing-basics","title":"String slicing basics","text":"<ul> <li>Strings are a sequence type, having characters ordered by index from left to right</li> <li>An index is an integer matching to a specific position in a string's sequence of characters</li> <li>An individual character is read using an index surrounded by brackets<ul> <li>Ex: my_str[5] reads the character at index 5 of the string my_str. Indices start at 0, so index 5 is a reference to the 6th character in the string.</li> </ul> </li> <li>Multiple consecutive characters can be read using slice notation.<ul> <li>Slice notation has the form my_str[start:end]</li> <li>If my_str is 'Boggle', then my_str[0:3] yields string 'Bog'</li> </ul> </li> <li>Other sequence types like lists and tuples also support slice notation.</li> </ul> <ul> <li>The last character of the slice is one location before the specified end.</li> <li>Negative numbers can be used to specify an index relative to the end of the string.<ul> <li>Ex: If the variable my_str is 'Jane Doe!?', then my_str[0:-2] yields 'Jane Doe' because the -2 refers to the second-to-last character '!'</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.1%20String%20Slicing/#slicing-and-slicing-operations","title":"Slicing and slicing operations","text":"<ul> <li>The Python interpreter creates a new string object for the slice.</li> <li>Thus, creating a slice of the string variable my_str, and then changing the value of my_str, does not also change the value of the slice.</li> </ul> <ul> <li>A programmer often wants to read all characters that occur before or after some index in the string</li> <li>Omitting a start index, such as in my_str[:end] yields the characters from indices 0 to end-1<ul> <li>Ex: my_str[:5] reads indices 0-4.</li> </ul> </li> <li>Similarly, omitting the end index yields the characters from the start index to the end of the string<ul> <li>Ex: my_str[5:] yields all characters at and after index 5.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.1%20String%20Slicing/#the-slice-stride","title":"The slice stride","text":"<ul> <li>The stride determines how much to increment the index after reading each element<ul> <li>For example, my_str[0:10:2] reads every other element between 0 and 10</li> </ul> </li> <li>The stride defaults to 1 if not specified.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.2%20Advanced%20string%20formatting/","title":"7.2 Advanced string formatting","text":""},{"location":"Python/ZyBooks%20Python/Chapter%207/7.2%20Advanced%20string%20formatting/#field-width","title":"Field width","text":"<p>Ex:</p> <p></p> <ul> <li>A format specification may include a field width that defines the minimum number of characters that must be inserted into the string.</li> <li>If the replacement value is smaller in size than the given field width, then the string's left side is padded with space characters.</li> <li>A field width is defined in a format specification by including an integer after the colon, as in {name:16} to specify a width of 16 characters.</li> <li>Numbers will be right-aligned within the width by default, whereas most other types like strings will be left-aligned.</li> </ul> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.2%20Advanced%20string%20formatting/#aligning-text","title":"Aligning text","text":"<ul> <li>A format specification can include an alignment character that determines how a value should be aligned within the width of the field.</li> <li>Alignment is set in a format specification by adding a special character before the field width integer</li> <li>The basic set of possible alignment options include left-aligned '&lt;', right-aligned '&gt;' and centered '^'.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.2%20Advanced%20string%20formatting/#fill","title":"Fill","text":"<ul> <li>The fill character is used to pad a replacement field when the string being inserted is smaller than the field width.</li> <li>The default fill character is an empty space ' '</li> <li>A programmer may define a different fill character in a format specification by placing the different fill character before the alignment character.<ul> <li>Ex: {score:0&gt;4} generates \"0009\" if score is 9 or \"0250\" if score is 250</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.2%20Advanced%20string%20formatting/#floating-point-precision","title":"Floating-point precision","text":"<ul> <li>'{:.1f}'.format(1.725) indicates a precision of 1, thus the resulting string would be '1.7'.</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.2%20Advanced%20string%20formatting/#zachs-note","title":"Zach\u2019s Note","text":"<ul> <li>A nice right up on effectively doing width formatting with integers and strings</li> <li>https://stackoverflow.com/questions/16110230/formatting-text-in-a-table-in-python</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.3%20String%20methods/","title":"7.3 String methods","text":""},{"location":"Python/ZyBooks%20Python/Chapter%207/7.3%20String%20methods/#finding-and-replacing","title":"Finding and Replacing","text":"<ul> <li>Recall that string objects are immutable -- once created, strings can not be changed.</li> <li>To update a string variable, a new string object must be created and bound to the variable name, replacing the old object.</li> <li> <p>The replace string method provides a simple way to create a new string by replacing all occurrences of a substring with a new substring.</p> <ul> <li><code>replace(old, new)</code> Returns a copy of the string with all occurrences of the substring old replaced by the string new. The old and new arguments may be string variables or string literals.</li> <li><code>replace(old, new, count)</code> Same as above, except only replaces the first count occurrences of old.</li> </ul> <p></p> <p>Some methods are useful for finding the position of where a character or substring is located in a string:</p> <ul> <li>find(x) Returns the index of the first occurrence of item x in the string, else returns -1. x may be a string variable or string literal. Recall that in a string, the index of the first character is 0, not 1. If <code>my_str</code> is 'Boo Hoo!':<ul> <li><code>my_str.find('!') # Returns 7</code></li> <li><code>my_str.find('Boo') # Returns 0</code></li> <li><code>my_str.find('oo') # Returns 1 (first occurrence only)</code></li> </ul> </li> <li>find(x, start) Same as find(x), but begins the search at index start:<ul> <li><code>my_str.find('oo', 2) # Returns 5</code></li> </ul> </li> <li>find(x, start, end) Same as find(x, start), but stops the search at index end - 1:<ul> <li><code>my_str.find('oo', 2, 4) # Returns -1 (not found)</code></li> </ul> </li> <li>rfind(x) Same as find(x) but searches the string in reverse, returning the last occurrence in the string.</li> </ul> <p>Another useful function is count, which counts the number of times a substring occurs in the string:</p> <ul> <li>count(x) -- Returns the number of times x occurs in the string.<ul> <li><code>my_str.count('oo') # Returns 2</code></li> </ul> </li> <li>Note that methods such as find() and rfind() are useful only for cases where a programmer needs to know the exact location of the character or substring in the string. If the exact position is not important, then the in membership operator should be used to check if a character or substring is contained in the string:</li> </ul> </li> </ul> <p></p>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.3%20String%20methods/#comparing-strings","title":"Comparing Strings","text":"<ul> <li>String objects may be compared using relational operators (&lt;, &lt;=, &gt;, &gt;=), equality operators (==, !=), membership operators (in, not in), and identity operators (is, is not).</li> </ul> <ul> <li>The identity operators (is, is not) determine whether the two arguments are bound to the same object</li> <li>A common error is to use an identity operator in place of an equality operator.<ul> <li>Ex: A programmer may write name is 'Amy Adams', intending to check if the value of name is the same as the literal 'Amy Adams'.</li> <li>Instead, the Python interpreter creates a new string object from the string literal on the right, and compares the identity of the new object to the name object, which returns False.</li> </ul> </li> <li>Good practice is to always use the equality operator== when comparing values.</li> </ul> <p>Methods to check a string value that returns a True or False Boolean value:</p> <ul> <li>isalnum() -- Returns True if all characters in the string are lowercase or uppercase letters, or the numbers 0-9.</li> <li>isdigit() -- Returns True if all characters are the numbers 0-9.</li> <li>islower() -- Returns True if all cased characters are lowercase letters.</li> <li>isupper() -- Return True if all cased characters are uppercase letters.</li> <li>isspace() -- Return True if all characters are whitespace.</li> <li>startswith(x) -- Return True if the string starts with x.</li> <li>endswith(x) -- Return True if the string ends with x.</li> </ul> <p>**Note that the methods islower() and isupper() ignore non-cased characters. Ex: 'abc?'.islower() returns True, ignoring the question mark.</p>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.3%20String%20methods/#creating-new-strings-from-a-string","title":"Creating new strings from a string","text":"<p>Methods to create new strings:</p> <ul> <li>capitalize() -- Returns a copy of the string with the first character capitalized and the rest lowercased.</li> <li>lower() -- Returns a copy of the string with all characters lowercased.</li> <li>upper() -- Returns a copy of the string with all characters uppercased.</li> <li>strip() -- Returns a copy of the string with leading and trailing whitespace removed.</li> <li>title() -- Returns a copy of the string as a title, with first letters of words capitalized.</li> <li>Good practice when reading user-entered strings is to apply transformations when reading in data (such as input), as opposed to later in the program.<ul> <li>Applying transformations immediately limits the likelihood of introducing bugs because the user entered an unexpected string value.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.4%20Splitting%20and%20joining%20strings/","title":"7.4 Splitting and joining strings","text":""},{"location":"Python/ZyBooks%20Python/Chapter%207/7.4%20Splitting%20and%20joining%20strings/#split-method","title":"split() method","text":"<ul> <li>The string method split() splits a string into a list of tokens.<ul> <li>Each token is a substring that forms a part of a larger string.</li> </ul> </li> <li>A separator is a character or sequence of characters that indicates where to split the string into tokens.<ul> <li>Ex: 'Martin Luther King Jr.'.split() splits the string literal \"Martin Luther King Jr.\" using any whitespace character as the default separator and returns the list of tokens ['Martin', 'Luther', 'King', 'Jr.']</li> </ul> </li> <li>The separator can be changed by calling split() with a string argument. Ex: 'a#b#c'.split('#') uses the \"#\" separator to split the string \"a#b#c\" into the three tokens ['a', 'b', 'c'].</li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.4%20Splitting%20and%20joining%20strings/#join-method","title":"join() method","text":"<ul> <li>The join() string method performs the inverse operation of split() by joining a list of strings together to create a single string<ul> <li>Ex: my_str = '@'.join(['billgates', 'microsoft']) assigns my_str with the string 'billgates@microsoft'.</li> <li>The separator '@' provides a join() method that accepts a single list argument</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.4%20Splitting%20and%20joining%20strings/#using-the-split-and-join-methods-together","title":"Using the split() and join() methods together","text":"<ul> <li>The split() and join() methods are commonly used together to replace or remove specific sections of a string.<ul> <li>Ex: A programmer may want to change 'C:/Users/Brian/report.txt' to 'C:\\Users\\Brian\\report.txt', perhaps because a different operating system uses different separators to specify file locations</li> </ul> </li> </ul> <ul> <li>A programmer may also want to add, remove, or replace specific token(s) from a string.<ul> <li>Ex: The program below reads in a URL and checks whether the fourth token (index 3) is 'wiki', as Wikipedia URLs follow the format of http://language.wikipedia.org/wiki/topic.</li> <li>If 'wiki' is missing from the URL, the program uses the list method insert() (explained further elsewhere) to correct the URL by adding 'wiki' before index 3.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.5%20String%20formatting%20using%20dictionaries/","title":"7.5 String formatting using dictionaries","text":""},{"location":"Python/ZyBooks%20Python/Chapter%207/7.5%20String%20formatting%20using%20dictionaries/#mapping-keys","title":"Mapping keys","text":"<ul> <li>Sometimes a string contains many conversion specifiers. Such strings can be hard to read and understand.</li> <li>Furthermore, the programmer must be careful with the ordering of the tuple values, lest items are mistakenly swapped.</li> <li>A dictionary may be used instead</li> <li>If a dictionary is used, then all conversion specifiers must include a mapping key component.<ul> <li>A mapping key is specified by indicating the key of the relevant value in the dictionary within parentheses.</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.6%20String%20formatting%20%28again%29/","title":"7.6 String formatting (again)","text":""},{"location":"Python/ZyBooks%20Python/Chapter%207/7.6%20String%20formatting%20%28again%29/#conversion-specifiers","title":"Conversion specifiers","text":"<ul> <li>A string formatting expression allows a programmer to create a string with placeholders that are replaced by the values of variables</li> <li>Such a placeholder is called a conversion specifier, and different conversion specifiers are used to perform a conversion of the given variable value to a different type when creating the string.</li> <li>The syntax for using a conversion specifier also includes a % symbol between the string and the value or variable to be placed into the string<ul> <li>Ex: print('The couch is %d years old.' % couch_age)</li> </ul> </li> </ul>"},{"location":"Python/ZyBooks%20Python/Chapter%207/7.6%20String%20formatting%20%28again%29/#multiple-conversion-specifiers","title":"Multiple Conversion Specifiers","text":"<ul> <li>Multiple conversion specifiers can appear within the string formatting expression.</li> <li>Expressions that contain more than one conversion specifier must specify the values within a tuple following the '%' character.</li> </ul> <p>-</p>"},{"location":"Python/ZyBooks%20Python/Chapter%207/Chapter%207%20ZyBook/","title":"Advanced String Formatting","text":"<ul> <li>7.1 String Slicing</li> <li>7.2 Advanced string formatting</li> <li>7.3 String methods</li> <li>7.4 Splitting and joining strings</li> <li>7.5 String formatting using dictionaries</li> <li>7.6 String formatting (again)</li> </ul>"},{"location":"Resources%20and%20Notes/1%20-%20Resources%20and%20Notes/","title":"Resources and Notes","text":"<ul> <li>Command Line Tricks</li> <li>Repo Naming Conventions</li> </ul>"},{"location":"Resources%20and%20Notes/1%20-%20Resources%20and%20Notes/#links","title":"Links","text":"<ul> <li>Dev Resources: Jobs, tools, and assets for developers</li> <li>Waggle Dance Guide to Programming: A super solid guide to start programming that you should definitely do</li> <li>How to write clean code</li> <li>https://teachyourselfcs.com/</li> <li>Git cheatsheet</li> </ul>"},{"location":"Resources%20and%20Notes/Command%20Line%20Tricks/","title":"Command Line Tricks","text":"<p>https://www.youtube.com/watch?v=wYN3KC9lLS0</p>"},{"location":"Resources%20and%20Notes/Command%20Line%20Tricks/#1-creating-multi-directories","title":"1. Creating multi. directories","text":"<ul> <li> <p>use mkdir {} to make multiple directories</p> </li> <li> <p>the -p is an optional parameter, telling where the parent directory is</p> <ul> <li>You can use this to tell where to create the directory</li> </ul> </li> <li> <p>{a,b} creates two folders</p> </li> <li> <p>{x,y,z} creates the same folders (x,y,z) in both a and b folders</p> </li> </ul> <p></p>"},{"location":"Resources%20and%20Notes/Command%20Line%20Tricks/#2-cd-takes-you-back-to-your-previous-directory-regardless-of-where-you-are-now","title":"2. cd - takes you back to your previous directory regardless of where you are now","text":""},{"location":"Resources%20and%20Notes/Repo%20Naming%20Conventions/","title":"Repo Naming Conventions","text":"<p>Stackoverflow discussion</p> <p>\"The problem with camel case is that there are often different interpretations of words - for example, checkinService vs checkInService. Going along with Aaron's answer, it is difficult with auto-completion if you have many similarly named repos to have to constantly check if the person who created the repo you care about used a certain breakdown of the upper and lower cases. avoid upper case.</p> <p>His point about dashes is also well-advised.</p> <ol> <li> <p>use lower case.</p> </li> <li> <p>use dashes.</p> </li> <li> <p>be specific. you may find you have to differentiate between similar ideas later - ie use purchase-rest-service instead of service or rest-service.</p> </li> <li> <p>be consistent. consider usage from the various GIT vendors - how do you want your repositories to be sorted/grouped?\"</p> </li> </ol>"},{"location":"Web%20Development/1%20-%20Web%20Development/","title":"The Web Dev Wiki","text":""},{"location":"Web%20Development/1%20-%20Web%20Development/#the-odin-project","title":"The Odin Project","text":""},{"location":"Web%20Development/1%20-%20Web%20Development/#foundations","title":"Foundations","text":"<ul> <li>1.1 Command Line Basics</li> <li>2.2 HTML Boilerplate</li> <li>2.3 HTML - Working With Text</li> <li>2.4 Lists</li> <li>2.5 Links &amp; Images</li> </ul>"},{"location":"Web%20Development/1%20-%20Web%20Development/#neat-stuff","title":"Neat Stuff","text":"<ul> <li>7 bad features to have on a website:<ul> <li>Cookie notification (legally mandatory), but with crazy stupid interfaces</li> <li>geo location</li> <li>push notifications</li> <li>newletter pop-up or pop ups in general</li> <li>autoplay videos with disabled controls</li> <li>capctha</li> </ul> </li> <li>Read through this article about what charsets you should use with your HTML pages.</li> <li>Don\u2019t Fear the Internet</li> <li>Random text generator: Lorem Ipsum \u2013 Generator, Origins and Meaning</li> <li>Creating Lists - Learn to Code HTML &amp; CSS</li> <li></li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/1.1%20Command%20Line%20Basics/","title":"1.1 Command Line Basics","text":""},{"location":"Web%20Development/The%20Odin%20Project/1.1%20Command%20Line%20Basics/#external-links","title":"External links","text":"<ul> <li>Art of the command line</li> <li>Conquer the Command Line (Chapter 1 covers file navigation and manipulation)</li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/1.1%20Command%20Line%20Basics/#knowledge-check","title":"Knowledge Check","text":"<ul> <li>What is the command line?<ul> <li>Text-based way to control your computer</li> </ul> </li> <li>How do you open the command line on your computer?<ul> <li>Pop!_OS = <code>win</code>+<code>t</code></li> </ul> </li> <li>How can you navigate to a particular directory?<ul> <li><code>cd your/directory/here</code></li> </ul> </li> <li>Where will <code>cd</code> on its own navigate you to?<ul> <li>home directory</li> </ul> </li> <li>Where will <code>cd ..</code> navigate you to?<ul> <li>up one directory</li> </ul> </li> <li>How do you display the name of the directory you are currently in?<ul> <li><code>pwd</code> present working directory</li> </ul> </li> <li>How do you display the contents of the directory you are currently in?<ul> <li><code>ls</code></li> </ul> </li> <li>How do you create a new directory?<ul> <li><code>mkdir</code></li> </ul> </li> <li>How do you create a new file?<ul> <li><code>touch</code></li> </ul> </li> <li>How do you destroy a directory or file?<ul> <li>remove a directory = <code>rm -r</code></li> <li>remove a file = <code>rm</code></li> </ul> </li> <li>How do you rename a directory or file?<ul> <li><code>mv oldfile.txt newfile.txt</code></li> </ul> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/","title":"2.2 HTML Boilerplate","text":"<p>(Basic Structure) -  Always start the homepage of a website with <code>index.html</code>     - It is worth noting that we named our HTML file <code>index</code>. We should always name the HTML file that will contain the homepage of our websites <code>index.html</code>. This is because web servers will by default look for an <code>index.html</code> page when users land on our websites - and not having one will cause big problems.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;My First Webpage&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#the-doctype","title":"The DOCTYPE","text":"<ul> <li> <p>Every HTML page starts with a doctype declaration. The doctype\u2019s purpose is to tell the browser what version of HTML it should use to render the document.</p> </li> <li> <p>The latest version of HTML is HTML 5. Doctype: <code>&lt;!DOCTYPE html&gt;</code></p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#html-element","title":"HTML Element","text":"<ul> <li> <p>After doctype we must provide an <code>&lt;html&gt;</code> element. This is the root element of the document, every other element in the doc is a descendant of the <code>&lt;html&gt;</code> element.</p> <ul> <li>Included in every document</li> </ul> </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#lang-attribute","title":"<code>lang</code> attribute","text":"<ul> <li> <p>Specifies the language of the text content in the element</p> <ul> <li>Since this element encompasses the whole page, it specifies the language for the whole document</li> </ul> </li> <li> <p>Helps with assistive technologies (screen readers)</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#head-element","title":"Head Element","text":"<ul> <li> <p>The <code>&lt;head&gt;</code> element is where we put important meta-info about our webpages, and stuff required for our webpages to render correctly in the browser</p> </li> <li> <p>There should not be any elements that display content on the webpage</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#charset-meta-element","title":"Charset Meta Element","text":"<ul> <li> <p>Always have the meta tag for the charset encoding of the webpage in the head element:</p> <ul> <li><code>&lt;meta charset= \"utf-8\"&gt;</code></li> </ul> </li> <li> <p>Very important because it ensures that the webpage will display special symbols and characters correctly in the browser</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#title-element","title":"Title Element","text":"<ul> <li> <p>Always in the head element</p> <ul> <li>Ex: <code>&lt;title&gt;My First Webpage&lt;/title&gt;</code></li> </ul> </li> <li> <p>Gives the browser tab a name</p> </li> <li> <p>If no title is given, it will just say <code>index.html</code></p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#body-element","title":"Body Element","text":"<ul> <li> <p>The final element needed to complete the HTML boilerplate is the <code>&lt;body&gt;</code> element.</p> </li> <li> <p>This is where all the content displayed to the users will go</p> <ul> <li>text, images, lists, links, etc</li> </ul> </li> <li> <p>The body element is also within the HTML element and is always below the head element</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#viewing-html-files-in-the-browser","title":"Viewing HTML Files in the browser","text":"<ul> <li>Terminal: <code>google-chrome index.html</code></li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.2%20HTML%20Boilerplate/#vscode-shortcut","title":"VSCode Shortcut","text":"<ul> <li> <p>Built-in shortcut for generating boilerplate in one go</p> </li> <li> <p>Needs .html extension on file</p> </li> <li> <p>Empty HTML doc, press <code>!</code></p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/","title":"2.3 HTML Working With Text","text":""},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/#paragraphs","title":"Paragraphs","text":"<ul> <li>A paragraph element <code>&lt;p&gt;</code> will add a newline after the text in the paragraph element</li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/#headings","title":"Headings","text":"<ul> <li>6 levels from <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/#strong-element","title":"Strong Element","text":"<ul> <li> <p><code>&lt;strong&gt;</code> makes text bold</p> </li> <li> <p>Semantically marks text as important</p> <ul> <li>Affects tools like screen readers (changes the tone of the audio screen reader)</li> </ul> </li> <li> <p>Can be used independently or in conjunction with other text elements</p> </li> </ul> <p></p> <ul> <li>To create bold text without giving it important meaning, see CSS lessons</li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/#em-element","title":"Em Element","text":"<ul> <li> <p><code>&lt;em&gt;</code></p> </li> <li> <p>Makes text italic</p> </li> <li> <p>Semantically places emphasis on the text, again affect screen readers</p> </li> <li> <p>Can be used independently or in conjunction with other text elements</p> </li> </ul> <p></p>"},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/#nesting-indentation","title":"Nesting &amp; Indentation","text":"<ul> <li> <p>Element within elements are indented (This is nesting)</p> <ul> <li>When we nest, we create a parent/child relationship between the elements</li> </ul> </li> <li> <p>Elements at the same level of nesting are considered to be siblings.</p> </li> </ul> <p></p> <ul> <li> <p>Indentation makes nesting clear and readable</p> </li> <li> <p>Indent any child elements by two spaces</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.3%20HTML%20-%20Working%20With%20Text/#html-comments","title":"HTML Comments","text":"<ul> <li> <p>Not visible to the browser; notes for the devs</p> </li> <li> <p>Start with <code>&lt;!--</code></p> </li> <li> <p>end with <code>--&gt;</code></p> </li> <li> <p><code>&lt;!-- I am an html comment --&gt;</code></p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.4%20Lists/","title":"2.4 Lists","text":"<ul> <li>Creating Lists - Learn to Code HTML &amp; CSS</li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.4%20Lists/#unordered-lists","title":"Unordered Lists","text":"<ul> <li> <p>List of items where the order doesn\u2019t matter</p> </li> <li> <p>Unordered lists are created using the <code>&lt;ul&gt;</code> element, and each item within the list is created using the list item element <code>&lt;li&gt;</code>.</p> </li> </ul> <p></p>"},{"location":"Web%20Development/The%20Odin%20Project/2.4%20Lists/#ordered-lists","title":"Ordered Lists","text":"<ul> <li> <p>List of items where the order does matter, like step-by-step instructions for a recipe</p> </li> <li> <p>Ordered lists are created using the <code>&lt;ol&gt;</code> element</p> </li> <li> <p>Each individual item in them is again created using the list item element <code>&lt;li&gt;</code></p> </li> </ul> <p></p>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/","title":"2.5 Links and Images","text":""},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#anchor-elements","title":"Anchor Elements","text":"<ul> <li>Creates a link in HTML</li> </ul> <pre><code>&lt;a&gt;click me&lt;/a&gt;\n</code></pre> <ul> <li> <p>An HTML attribute gives additional info to the element that goes in the opening tag</p> </li> <li> <p>Add a href (hyperlink reference) attribute to the opening anchor tag</p> </li> </ul> <pre><code>&lt;a href=\"https://www.theodinproject.com/about\"&gt;click me&lt;/a&gt;\n</code></pre> <ul> <li> <p>By default, any text wrapped with an anchor tag without a <code>href</code> attribute will look like plain text.</p> </li> <li> <p>If the <code>href</code> attribute is present, the browser will give the text a blue color and underline it to signify it is a link.</p> </li> <li> <p>Can link to videos, pdf files, images, etc, but for the most part, you will be linking to other HTML documents</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#absolute-and-relative-links","title":"Absolute and Relative Links","text":""},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#absolute-links","title":"Absolute Links","text":"<ul> <li>Links to pages on other websites</li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#relative-links","title":"Relative Links","text":"<ul> <li> <p>Links to other pages within our own website</p> </li> <li> <p>Relative links do not include the domain name</p> </li> <li> <p>Since it is another page on the same site, it assumes the domain name will be the same as the page we created the link on.</p> </li> <li> <p>Relative links only include the file path to the other page, relative to the page you are creating the link on.</p> </li> </ul> <pre><code>&lt;body&gt;\n  &lt;h1&gt;Homepage&lt;/h1&gt;\n    &lt;a href=\"https://www.theodinproject.com/about\"&gt;click me&lt;/a&gt;\n\n    &lt;a href=\"about.html\"&gt;About&lt;/a&gt;\n&lt;/body&gt;\n</code></pre> <ul> <li> <p>This works because the index and about page are in the same directory.</p> </li> <li> <p>We can simply use its name (<code>about.html</code>) as the link\u2019s href value.</p> </li> <li> <p>Normally we would only have the index.html at the root directory and all other HTML files in their own directory.</p> </li> </ul> <pre><code>&lt;body&gt;\n  &lt;h1&gt;Homepage&lt;/h1&gt;\n  &lt;a href=\"pages/about.html\"&gt;About&lt;/a&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#if-this-doesnt-work","title":"If this doesn't work:","text":"<ul> <li> <p>You can still run into unexpected issues with this approach</p> </li> <li> <p>Putting <code>./</code> before the link will in most cases prevent such issues</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#images","title":"Images","text":"<ul> <li> <p>To display an image in HTML we use the <code>&lt;img&gt;</code> element.</p> </li> <li> <p>The <code>&lt;img&gt;</code> element is self-closing.</p> </li> <li> <p>Empty, self-closing HTML elements do not need a closing tag.</p> </li> <li> <p>Instead of wrapping content with an opening and closing tag, it embeds an image into the page using a src attribute which tells the browser where the image file is located.</p> </li> <li> <p>The src attribute works like the href attribute for anchor tags</p> </li> <li> <p>It can embed an images using absolute or relative links</p> </li> </ul>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#absolute","title":"Absolute","text":"<pre><code> &lt;img src=\"https://www.theodinproject.com/mstile-310x310.png\"&gt;\n</code></pre>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#relative","title":"Relative","text":"<pre><code>&lt;img src=\"images/dog.jpg\"&gt;\n</code></pre>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#using-images-in-other-directories","title":"Using images in other directories","text":"<ul> <li> <p>If you're in a subfoldered HTML file, you will have to get the images folder all the way from the parent directory</p> </li> <li> <p>To go to the parent directory we need to use two dots in the relative filepath like this: <code>../</code></p> </li> </ul> <pre><code>&lt;img src=\"../images/dog.jpg\"&gt;\n</code></pre> <p>To break this down:</p> <ol> <li> <p>First, we are going to the parent directory of the pages directory which is <code>odin-links-and-images</code>.</p> </li> <li> <p>Then, from the parent directory, we can go into the <code>images</code> directory.</p> </li> <li> <p>Finally, we can access the <code>dog.jpg</code> file.</p> </li> </ol>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#alt-attribute","title":"Alt Attribute","text":"<ul> <li> <p>Besides the src attribute, every image element should also have an alt (alternative text) attribute</p> </li> <li> <p>The alt attribute is used to describe an image</p> </li> <li> <p>It will be used in place of the image if it cannot be loaded.</p> </li> <li> <p>It is also used with screen readers to describe what the image is to visually impaired users.</p> </li> </ul> <pre><code> &lt;img src=\"https://www.theodinproject.com/mstile-310x310.png\" alt=\"The Odin Project Logo\"&gt;\n</code></pre>"},{"location":"Web%20Development/The%20Odin%20Project/2.5%20Links%20%26%20Images/#notes","title":"Notes:","text":"<p>There are 4 main image formats in use on the web and they all do different things:</p> <ol> <li> <p>JPG</p> <ul> <li> <p>Designed for handling larger color palettes without massively increasing file size</p> </li> <li> <p>No transparent pixels, so you can see white edges</p> </li> <li> <p>Great for photos</p> </li> </ul> </li> <li> <p>GIF</p> <ul> <li> <p>Low level of details</p> </li> <li> <p>Used for simple animation</p> </li> </ul> </li> <li> <p>PNG</p> <ul> <li> <p>Allows for transparent pixels</p> </li> <li> <p>Great for icons, tech diagrams, logos, etc.</p> </li> </ul> </li> <li> <p>SVG</p> <ul> <li> <p>Unlike pixel based above, SVG is vector based, which allows it to scale without loss of quality</p> </li> <li> <p>Great for responsive design</p> </li> <li> <p>Great replacement for PNG, EXCEPT:</p> <ul> <li> <p>There is one potential issue with SVGs: for them to display consistently across browsers, you need to convert any text fields to outlines using your image editor</p> </li> <li> <p>If your images contain a lot of text (like the fancy screenshots in this tutorial), this can have a big impact on file size.</p> </li> </ul> </li> </ul> </li> </ol>"}]}